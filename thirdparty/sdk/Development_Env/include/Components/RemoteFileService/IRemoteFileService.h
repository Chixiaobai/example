/*This file is auto generated by RPCAutoCode. Please do not edit it.*/
#pragma once

#include "Base/IBase.h"
#include "DataType/SafeArray.h"
#include "IRemoteFile.h"

#define UNIQUE_REMOTEFILESERVICE_NAME "RemoteFileService"

#define REMOTE_FILE_SERVICE_INTERFACE_ID 0

interface IRemoteFileService : public IBase {
    /*create file on remote system*/
    virtual bool createRemoteFile(/*[IN]*/ const char* strFilePath) = 0;
    /*remove file on remote system*/
    virtual bool removeRemoteFile(/*[IN]*/ const char* strFilePath) = 0;
    /*if file is existed on remote system*/
    virtual bool existRemoteFile(/*[IN]*/ const char* strFilePath) = 0;
    /*move file on remote system(can not move file between host)*/
    virtual bool moveRemoteFile(/*[IN]*/ const char* strSrcFilePath, /*[IN]*/ const char* strDstFilePath) = 0;
    /*copy file on remote system(can not copy file between host)*/
    virtual bool copyRemoteFile(/*[IN]*/ const char* strSrcFilePath, /*[IN]*/ const char* strDstFilePath,
                                /*[IN]*/ bool bFailedIfExist) = 0;
    /*get remote file interface on remote system*/
    virtual IRemoteFile* getRemoteFile(/*[IN]*/ const char* strFilePath) = 0;
    /*create folder on remote system*/
    virtual bool createRemoteFolder(/*[IN]*/ const char* strFolderPath) = 0;
    /*remove folder on remote system*/
    virtual bool removeRemoteFolder(/*[IN]*/ const char* strFolderPath, /*[IN]*/ bool bIncludeAllFiles) = 0;
    /*if folder is existed on remote system*/
    virtual bool existRemoteFolder(/*[IN]*/ const char* strFolderPath) = 0;
    /*move folder on remote system(can not move folder between host)*/
    virtual bool moveRemoteFolder(/*[IN]*/ const char* strSrcFolderPath, /*[IN]*/ const char* strDstFolderPath) = 0;
    /*copy folder on remote system(can not copy folder between host)*/
    virtual bool copyRemoteFolder(/*[IN]*/ const char* strSrcFolderPath, /*[IN]*/ const char* strDstFolderPath,
                                  /*[IN]*/ bool bFailedIfExist) = 0;
    /*get remote application folder path*/
    virtual void getApplicationFolder(/*OUT[string]*/ safearray_handle * *strApplicationDir) = 0;
    /*get files and folders on remote system path*/
    virtual void remoteLs(/*[IN]*/ const char* strParentFolderPath, /*OUT[string]*/ safearray_handle** strFileList,
                          /*OUT[string]*/ safearray_handle** strFolderList) = 0;
    /*splice path on remote system*/
    virtual bool splicePath(/*[IN]*/ const char* strRelativePath, /*[IN]*/ const char* strWorkspace,
                            /*OUT[string]*/ safearray_handle** strAbsolutePath) = 0;
    /*get split char for path on remote system*/
    virtual char getPathSplit() = 0;
    /*force flush modification to disk*/
    virtual bool sync() = 0;
    /*set file access time and modification time*/
    virtual bool setFileTime(/*[IN]*/ const char* strFilePath, /*[IN]*/ int intYear, /*[IN]*/ int intMonth,
                             /*[IN]*/ int intDay, /*[IN]*/ int intHour, /*[IN]*/ int intMinute,
                             /*[IN]*/ int intSecond) = 0;
    /*set file access time*/
    virtual bool setFileAccessTime(/*[IN]*/ const char* strFilePath, /*[IN]*/ int intYear, /*[IN]*/ int intMonth,
                                   /*[IN]*/ int intDay, /*[IN]*/ int intHour, /*[IN]*/ int intMinute,
                                   /*[IN]*/ int intSecond) = 0;
    /*set file modification time*/
    virtual bool setFileModificationTime(/*[IN]*/ const char* strFilePath, /*[IN]*/ int intYear, /*[IN]*/ int intMonth,
                                         /*[IN]*/ int intDay, /*[IN]*/ int intHour, /*[IN]*/ int intMinute,
                                         /*[IN]*/ int intSecond) = 0;
    /*get file access time*/
    virtual bool getFileAccessTime(/*[IN]*/ const char* strFilePath, /*[OUT]*/ int& intYear, /*[OUT]*/ int& intMonth,
                                   /*[OUT]*/ int& intDay, /*[OUT]*/ int& intHour, /*[OUT]*/ int& intMinute,
                                   /*[OUT]*/ int& intSecond) = 0;
    /*get file modification time*/
    virtual bool getFileModificationTime(/*[IN]*/ const char* strFilePath, /*[OUT]*/ int& intYear,
                                         /*[OUT]*/ int& intMonth, /*[OUT]*/ int& intDay, /*[OUT]*/ int& intHour,
                                         /*[OUT]*/ int& intMinute, /*[OUT]*/ int& intSecond) = 0;
};

ENABLE_RECOGNIZE_MACRO(IRemoteFileService)
