// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Service.proto

#include "Service.pb.h"
#include "Service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace H10WService {

static const char* DeviceControlService_method_names[] = {
  "/H10WService.DeviceControlService/ControlBrakeStatus",
  "/H10WService.DeviceControlService/ControlPowerStatus",
  "/H10WService.DeviceControlService/GetTorqueOffset",
  "/H10WService.DeviceControlService/GetJointErrorCode",
  "/H10WService.DeviceControlService/CalibrationZero",
  "/H10WService.DeviceControlService/SaveParameter",
  "/H10WService.DeviceControlService/ClearError",
  "/H10WService.DeviceControlService/Calibration90Deg",
  "/H10WService.DeviceControlService/SetJointSoftLimit",
  "/H10WService.DeviceControlService/GetJointSoftLimit",
  "/H10WService.DeviceControlService/GetJointHardLimit",
};

std::unique_ptr< DeviceControlService::Stub> DeviceControlService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceControlService::Stub> stub(new DeviceControlService::Stub(channel, options));
  return stub;
}

DeviceControlService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ControlBrakeStatus_(DeviceControlService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ControlPowerStatus_(DeviceControlService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTorqueOffset_(DeviceControlService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointErrorCode_(DeviceControlService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalibrationZero_(DeviceControlService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveParameter_(DeviceControlService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearError_(DeviceControlService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Calibration90Deg_(DeviceControlService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetJointSoftLimit_(DeviceControlService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointSoftLimit_(DeviceControlService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointHardLimit_(DeviceControlService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceControlService::Stub::ControlBrakeStatus(::grpc::ClientContext* context, const ::H10WService::BrakeControlRequest& request, ::H10WService::BrakeControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::BrakeControlRequest, ::H10WService::BrakeControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ControlBrakeStatus_, context, request, response);
}

void DeviceControlService::Stub::async::ControlBrakeStatus(::grpc::ClientContext* context, const ::H10WService::BrakeControlRequest* request, ::H10WService::BrakeControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::BrakeControlRequest, ::H10WService::BrakeControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlBrakeStatus_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::ControlBrakeStatus(::grpc::ClientContext* context, const ::H10WService::BrakeControlRequest* request, ::H10WService::BrakeControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlBrakeStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::BrakeControlResponse>* DeviceControlService::Stub::PrepareAsyncControlBrakeStatusRaw(::grpc::ClientContext* context, const ::H10WService::BrakeControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::BrakeControlResponse, ::H10WService::BrakeControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ControlBrakeStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::BrakeControlResponse>* DeviceControlService::Stub::AsyncControlBrakeStatusRaw(::grpc::ClientContext* context, const ::H10WService::BrakeControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncControlBrakeStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::ControlPowerStatus(::grpc::ClientContext* context, const ::H10WService::PowerControlRequest& request, ::H10WService::PowerControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::PowerControlRequest, ::H10WService::PowerControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ControlPowerStatus_, context, request, response);
}

void DeviceControlService::Stub::async::ControlPowerStatus(::grpc::ClientContext* context, const ::H10WService::PowerControlRequest* request, ::H10WService::PowerControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::PowerControlRequest, ::H10WService::PowerControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlPowerStatus_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::ControlPowerStatus(::grpc::ClientContext* context, const ::H10WService::PowerControlRequest* request, ::H10WService::PowerControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlPowerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::PowerControlResponse>* DeviceControlService::Stub::PrepareAsyncControlPowerStatusRaw(::grpc::ClientContext* context, const ::H10WService::PowerControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::PowerControlResponse, ::H10WService::PowerControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ControlPowerStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::PowerControlResponse>* DeviceControlService::Stub::AsyncControlPowerStatusRaw(::grpc::ClientContext* context, const ::H10WService::PowerControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncControlPowerStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::GetTorqueOffset(::grpc::ClientContext* context, const ::H10WService::TorqueOffSetRequest& request, ::H10WService::TorqueOffSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::TorqueOffSetRequest, ::H10WService::TorqueOffSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTorqueOffset_, context, request, response);
}

void DeviceControlService::Stub::async::GetTorqueOffset(::grpc::ClientContext* context, const ::H10WService::TorqueOffSetRequest* request, ::H10WService::TorqueOffSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::TorqueOffSetRequest, ::H10WService::TorqueOffSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTorqueOffset_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::GetTorqueOffset(::grpc::ClientContext* context, const ::H10WService::TorqueOffSetRequest* request, ::H10WService::TorqueOffSetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTorqueOffset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::TorqueOffSetResponse>* DeviceControlService::Stub::PrepareAsyncGetTorqueOffsetRaw(::grpc::ClientContext* context, const ::H10WService::TorqueOffSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::TorqueOffSetResponse, ::H10WService::TorqueOffSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTorqueOffset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::TorqueOffSetResponse>* DeviceControlService::Stub::AsyncGetTorqueOffsetRaw(::grpc::ClientContext* context, const ::H10WService::TorqueOffSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTorqueOffsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::GetJointErrorCode(::grpc::ClientContext* context, const ::H10WService::GetErrorCodeRequest& request, ::H10WService::GetErrorCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::GetErrorCodeRequest, ::H10WService::GetErrorCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointErrorCode_, context, request, response);
}

void DeviceControlService::Stub::async::GetJointErrorCode(::grpc::ClientContext* context, const ::H10WService::GetErrorCodeRequest* request, ::H10WService::GetErrorCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::GetErrorCodeRequest, ::H10WService::GetErrorCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointErrorCode_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::GetJointErrorCode(::grpc::ClientContext* context, const ::H10WService::GetErrorCodeRequest* request, ::H10WService::GetErrorCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointErrorCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::GetErrorCodeResponse>* DeviceControlService::Stub::PrepareAsyncGetJointErrorCodeRaw(::grpc::ClientContext* context, const ::H10WService::GetErrorCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::GetErrorCodeResponse, ::H10WService::GetErrorCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointErrorCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::GetErrorCodeResponse>* DeviceControlService::Stub::AsyncGetJointErrorCodeRaw(::grpc::ClientContext* context, const ::H10WService::GetErrorCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointErrorCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::CalibrationZero(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest& request, ::H10WService::CalibrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::CalibrationRequest, ::H10WService::CalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CalibrationZero_, context, request, response);
}

void DeviceControlService::Stub::async::CalibrationZero(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest* request, ::H10WService::CalibrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::CalibrationRequest, ::H10WService::CalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalibrationZero_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::CalibrationZero(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest* request, ::H10WService::CalibrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalibrationZero_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::CalibrationResponse>* DeviceControlService::Stub::PrepareAsyncCalibrationZeroRaw(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::CalibrationResponse, ::H10WService::CalibrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CalibrationZero_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::CalibrationResponse>* DeviceControlService::Stub::AsyncCalibrationZeroRaw(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCalibrationZeroRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::SaveParameter(::grpc::ClientContext* context, const ::H10WService::SaveParameterRequest& request, ::H10WService::SaveParameterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::SaveParameterRequest, ::H10WService::SaveParameterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SaveParameter_, context, request, response);
}

void DeviceControlService::Stub::async::SaveParameter(::grpc::ClientContext* context, const ::H10WService::SaveParameterRequest* request, ::H10WService::SaveParameterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::SaveParameterRequest, ::H10WService::SaveParameterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveParameter_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::SaveParameter(::grpc::ClientContext* context, const ::H10WService::SaveParameterRequest* request, ::H10WService::SaveParameterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveParameter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::SaveParameterResponse>* DeviceControlService::Stub::PrepareAsyncSaveParameterRaw(::grpc::ClientContext* context, const ::H10WService::SaveParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::SaveParameterResponse, ::H10WService::SaveParameterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SaveParameter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::SaveParameterResponse>* DeviceControlService::Stub::AsyncSaveParameterRaw(::grpc::ClientContext* context, const ::H10WService::SaveParameterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveParameterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::ClearError(::grpc::ClientContext* context, const ::H10WService::ClearErrorRequest& request, ::H10WService::ClearErrorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::ClearErrorRequest, ::H10WService::ClearErrorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearError_, context, request, response);
}

void DeviceControlService::Stub::async::ClearError(::grpc::ClientContext* context, const ::H10WService::ClearErrorRequest* request, ::H10WService::ClearErrorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::ClearErrorRequest, ::H10WService::ClearErrorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearError_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::ClearError(::grpc::ClientContext* context, const ::H10WService::ClearErrorRequest* request, ::H10WService::ClearErrorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearError_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::ClearErrorResponse>* DeviceControlService::Stub::PrepareAsyncClearErrorRaw(::grpc::ClientContext* context, const ::H10WService::ClearErrorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::ClearErrorResponse, ::H10WService::ClearErrorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearError_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::ClearErrorResponse>* DeviceControlService::Stub::AsyncClearErrorRaw(::grpc::ClientContext* context, const ::H10WService::ClearErrorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearErrorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::Calibration90Deg(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest& request, ::H10WService::CalibrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::CalibrationRequest, ::H10WService::CalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Calibration90Deg_, context, request, response);
}

void DeviceControlService::Stub::async::Calibration90Deg(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest* request, ::H10WService::CalibrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::CalibrationRequest, ::H10WService::CalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Calibration90Deg_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::Calibration90Deg(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest* request, ::H10WService::CalibrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Calibration90Deg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::CalibrationResponse>* DeviceControlService::Stub::PrepareAsyncCalibration90DegRaw(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::CalibrationResponse, ::H10WService::CalibrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Calibration90Deg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::CalibrationResponse>* DeviceControlService::Stub::AsyncCalibration90DegRaw(::grpc::ClientContext* context, const ::H10WService::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCalibration90DegRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::SetJointSoftLimit(::grpc::ClientContext* context, const ::H10WService::SetJointSoftLimitRequest& request, ::H10WService::SetJointSoftLimitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::SetJointSoftLimitRequest, ::H10WService::SetJointSoftLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetJointSoftLimit_, context, request, response);
}

void DeviceControlService::Stub::async::SetJointSoftLimit(::grpc::ClientContext* context, const ::H10WService::SetJointSoftLimitRequest* request, ::H10WService::SetJointSoftLimitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::SetJointSoftLimitRequest, ::H10WService::SetJointSoftLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointSoftLimit_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::SetJointSoftLimit(::grpc::ClientContext* context, const ::H10WService::SetJointSoftLimitRequest* request, ::H10WService::SetJointSoftLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointSoftLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::SetJointSoftLimitResponse>* DeviceControlService::Stub::PrepareAsyncSetJointSoftLimitRaw(::grpc::ClientContext* context, const ::H10WService::SetJointSoftLimitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::SetJointSoftLimitResponse, ::H10WService::SetJointSoftLimitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetJointSoftLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::SetJointSoftLimitResponse>* DeviceControlService::Stub::AsyncSetJointSoftLimitRaw(::grpc::ClientContext* context, const ::H10WService::SetJointSoftLimitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetJointSoftLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::GetJointSoftLimit(::grpc::ClientContext* context, const ::H10WService::GetJointSoftLimitRequest& request, ::H10WService::GetJointSoftLimitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::GetJointSoftLimitRequest, ::H10WService::GetJointSoftLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointSoftLimit_, context, request, response);
}

void DeviceControlService::Stub::async::GetJointSoftLimit(::grpc::ClientContext* context, const ::H10WService::GetJointSoftLimitRequest* request, ::H10WService::GetJointSoftLimitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::GetJointSoftLimitRequest, ::H10WService::GetJointSoftLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointSoftLimit_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::GetJointSoftLimit(::grpc::ClientContext* context, const ::H10WService::GetJointSoftLimitRequest* request, ::H10WService::GetJointSoftLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointSoftLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::GetJointSoftLimitResponse>* DeviceControlService::Stub::PrepareAsyncGetJointSoftLimitRaw(::grpc::ClientContext* context, const ::H10WService::GetJointSoftLimitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::GetJointSoftLimitResponse, ::H10WService::GetJointSoftLimitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointSoftLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::GetJointSoftLimitResponse>* DeviceControlService::Stub::AsyncGetJointSoftLimitRaw(::grpc::ClientContext* context, const ::H10WService::GetJointSoftLimitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointSoftLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceControlService::Stub::GetJointHardLimit(::grpc::ClientContext* context, const ::H10WService::GetJointHardLimitRequest& request, ::H10WService::GetJointHardLimitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::H10WService::GetJointHardLimitRequest, ::H10WService::GetJointHardLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointHardLimit_, context, request, response);
}

void DeviceControlService::Stub::async::GetJointHardLimit(::grpc::ClientContext* context, const ::H10WService::GetJointHardLimitRequest* request, ::H10WService::GetJointHardLimitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::H10WService::GetJointHardLimitRequest, ::H10WService::GetJointHardLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointHardLimit_, context, request, response, std::move(f));
}

void DeviceControlService::Stub::async::GetJointHardLimit(::grpc::ClientContext* context, const ::H10WService::GetJointHardLimitRequest* request, ::H10WService::GetJointHardLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointHardLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::H10WService::GetJointHardLimitResponse>* DeviceControlService::Stub::PrepareAsyncGetJointHardLimitRaw(::grpc::ClientContext* context, const ::H10WService::GetJointHardLimitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::H10WService::GetJointHardLimitResponse, ::H10WService::GetJointHardLimitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointHardLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::H10WService::GetJointHardLimitResponse>* DeviceControlService::Stub::AsyncGetJointHardLimitRaw(::grpc::ClientContext* context, const ::H10WService::GetJointHardLimitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointHardLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

DeviceControlService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::BrakeControlRequest, ::H10WService::BrakeControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::BrakeControlRequest* req,
             ::H10WService::BrakeControlResponse* resp) {
               return service->ControlBrakeStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::PowerControlRequest, ::H10WService::PowerControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::PowerControlRequest* req,
             ::H10WService::PowerControlResponse* resp) {
               return service->ControlPowerStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::TorqueOffSetRequest, ::H10WService::TorqueOffSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::TorqueOffSetRequest* req,
             ::H10WService::TorqueOffSetResponse* resp) {
               return service->GetTorqueOffset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::GetErrorCodeRequest, ::H10WService::GetErrorCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::GetErrorCodeRequest* req,
             ::H10WService::GetErrorCodeResponse* resp) {
               return service->GetJointErrorCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::CalibrationRequest, ::H10WService::CalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::CalibrationRequest* req,
             ::H10WService::CalibrationResponse* resp) {
               return service->CalibrationZero(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::SaveParameterRequest, ::H10WService::SaveParameterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::SaveParameterRequest* req,
             ::H10WService::SaveParameterResponse* resp) {
               return service->SaveParameter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::ClearErrorRequest, ::H10WService::ClearErrorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::ClearErrorRequest* req,
             ::H10WService::ClearErrorResponse* resp) {
               return service->ClearError(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::CalibrationRequest, ::H10WService::CalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::CalibrationRequest* req,
             ::H10WService::CalibrationResponse* resp) {
               return service->Calibration90Deg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::SetJointSoftLimitRequest, ::H10WService::SetJointSoftLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::SetJointSoftLimitRequest* req,
             ::H10WService::SetJointSoftLimitResponse* resp) {
               return service->SetJointSoftLimit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::GetJointSoftLimitRequest, ::H10WService::GetJointSoftLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::GetJointSoftLimitRequest* req,
             ::H10WService::GetJointSoftLimitResponse* resp) {
               return service->GetJointSoftLimit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceControlService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceControlService::Service, ::H10WService::GetJointHardLimitRequest, ::H10WService::GetJointHardLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::H10WService::GetJointHardLimitRequest* req,
             ::H10WService::GetJointHardLimitResponse* resp) {
               return service->GetJointHardLimit(ctx, req, resp);
             }, this)));
}

DeviceControlService::Service::~Service() {
}

::grpc::Status DeviceControlService::Service::ControlBrakeStatus(::grpc::ServerContext* context, const ::H10WService::BrakeControlRequest* request, ::H10WService::BrakeControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::ControlPowerStatus(::grpc::ServerContext* context, const ::H10WService::PowerControlRequest* request, ::H10WService::PowerControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::GetTorqueOffset(::grpc::ServerContext* context, const ::H10WService::TorqueOffSetRequest* request, ::H10WService::TorqueOffSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::GetJointErrorCode(::grpc::ServerContext* context, const ::H10WService::GetErrorCodeRequest* request, ::H10WService::GetErrorCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::CalibrationZero(::grpc::ServerContext* context, const ::H10WService::CalibrationRequest* request, ::H10WService::CalibrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::SaveParameter(::grpc::ServerContext* context, const ::H10WService::SaveParameterRequest* request, ::H10WService::SaveParameterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::ClearError(::grpc::ServerContext* context, const ::H10WService::ClearErrorRequest* request, ::H10WService::ClearErrorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::Calibration90Deg(::grpc::ServerContext* context, const ::H10WService::CalibrationRequest* request, ::H10WService::CalibrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::SetJointSoftLimit(::grpc::ServerContext* context, const ::H10WService::SetJointSoftLimitRequest* request, ::H10WService::SetJointSoftLimitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::GetJointSoftLimit(::grpc::ServerContext* context, const ::H10WService::GetJointSoftLimitRequest* request, ::H10WService::GetJointSoftLimitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceControlService::Service::GetJointHardLimit(::grpc::ServerContext* context, const ::H10WService::GetJointHardLimitRequest* request, ::H10WService::GetJointHardLimitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace H10WService

