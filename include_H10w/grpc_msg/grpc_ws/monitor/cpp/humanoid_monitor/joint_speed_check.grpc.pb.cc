// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: joint_speed_check.proto

#include "joint_speed_check.pb.h"
#include "joint_speed_check.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace humanoid_monitor {

static const char* JointSpeedCheckService_method_names[] = {
  "/humanoid_monitor.JointSpeedCheckService/SetJointSpeedCheckConfig",
  "/humanoid_monitor.JointSpeedCheckService/GetJointSpeedCheckConfig",
};

std::unique_ptr< JointSpeedCheckService::Stub> JointSpeedCheckService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< JointSpeedCheckService::Stub> stub(new JointSpeedCheckService::Stub(channel, options));
  return stub;
}

JointSpeedCheckService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetJointSpeedCheckConfig_(JointSpeedCheckService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointSpeedCheckConfig_(JointSpeedCheckService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status JointSpeedCheckService::Stub::SetJointSpeedCheckConfig(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointSpeedCheckConfigRequest& request, ::humanoid_monitor::SetJointSpeedCheckConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::humanoid_monitor::SetJointSpeedCheckConfigRequest, ::humanoid_monitor::SetJointSpeedCheckConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetJointSpeedCheckConfig_, context, request, response);
}

void JointSpeedCheckService::Stub::async::SetJointSpeedCheckConfig(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointSpeedCheckConfigRequest* request, ::humanoid_monitor::SetJointSpeedCheckConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::humanoid_monitor::SetJointSpeedCheckConfigRequest, ::humanoid_monitor::SetJointSpeedCheckConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointSpeedCheckConfig_, context, request, response, std::move(f));
}

void JointSpeedCheckService::Stub::async::SetJointSpeedCheckConfig(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointSpeedCheckConfigRequest* request, ::humanoid_monitor::SetJointSpeedCheckConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointSpeedCheckConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::humanoid_monitor::SetJointSpeedCheckConfigResponse>* JointSpeedCheckService::Stub::PrepareAsyncSetJointSpeedCheckConfigRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointSpeedCheckConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::humanoid_monitor::SetJointSpeedCheckConfigResponse, ::humanoid_monitor::SetJointSpeedCheckConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetJointSpeedCheckConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::humanoid_monitor::SetJointSpeedCheckConfigResponse>* JointSpeedCheckService::Stub::AsyncSetJointSpeedCheckConfigRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointSpeedCheckConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetJointSpeedCheckConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status JointSpeedCheckService::Stub::GetJointSpeedCheckConfig(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointSpeedCheckConfigRequest& request, ::humanoid_monitor::GetJointSpeedCheckConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::humanoid_monitor::GetJointSpeedCheckConfigRequest, ::humanoid_monitor::GetJointSpeedCheckConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointSpeedCheckConfig_, context, request, response);
}

void JointSpeedCheckService::Stub::async::GetJointSpeedCheckConfig(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointSpeedCheckConfigRequest* request, ::humanoid_monitor::GetJointSpeedCheckConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::humanoid_monitor::GetJointSpeedCheckConfigRequest, ::humanoid_monitor::GetJointSpeedCheckConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointSpeedCheckConfig_, context, request, response, std::move(f));
}

void JointSpeedCheckService::Stub::async::GetJointSpeedCheckConfig(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointSpeedCheckConfigRequest* request, ::humanoid_monitor::GetJointSpeedCheckConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointSpeedCheckConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::humanoid_monitor::GetJointSpeedCheckConfigResponse>* JointSpeedCheckService::Stub::PrepareAsyncGetJointSpeedCheckConfigRaw(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointSpeedCheckConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::humanoid_monitor::GetJointSpeedCheckConfigResponse, ::humanoid_monitor::GetJointSpeedCheckConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointSpeedCheckConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::humanoid_monitor::GetJointSpeedCheckConfigResponse>* JointSpeedCheckService::Stub::AsyncGetJointSpeedCheckConfigRaw(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointSpeedCheckConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointSpeedCheckConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

JointSpeedCheckService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JointSpeedCheckService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JointSpeedCheckService::Service, ::humanoid_monitor::SetJointSpeedCheckConfigRequest, ::humanoid_monitor::SetJointSpeedCheckConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JointSpeedCheckService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::humanoid_monitor::SetJointSpeedCheckConfigRequest* req,
             ::humanoid_monitor::SetJointSpeedCheckConfigResponse* resp) {
               return service->SetJointSpeedCheckConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JointSpeedCheckService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JointSpeedCheckService::Service, ::humanoid_monitor::GetJointSpeedCheckConfigRequest, ::humanoid_monitor::GetJointSpeedCheckConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JointSpeedCheckService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::humanoid_monitor::GetJointSpeedCheckConfigRequest* req,
             ::humanoid_monitor::GetJointSpeedCheckConfigResponse* resp) {
               return service->GetJointSpeedCheckConfig(ctx, req, resp);
             }, this)));
}

JointSpeedCheckService::Service::~Service() {
}

::grpc::Status JointSpeedCheckService::Service::SetJointSpeedCheckConfig(::grpc::ServerContext* context, const ::humanoid_monitor::SetJointSpeedCheckConfigRequest* request, ::humanoid_monitor::SetJointSpeedCheckConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status JointSpeedCheckService::Service::GetJointSpeedCheckConfig(::grpc::ServerContext* context, const ::humanoid_monitor::GetJointSpeedCheckConfigRequest* request, ::humanoid_monitor::GetJointSpeedCheckConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace humanoid_monitor

