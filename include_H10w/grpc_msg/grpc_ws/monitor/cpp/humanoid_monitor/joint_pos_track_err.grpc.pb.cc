// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: joint_pos_track_err.proto

#include "joint_pos_track_err.pb.h"
#include "joint_pos_track_err.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace humanoid_monitor {

static const char* JointPosTrackErrService_method_names[] = {
  "/humanoid_monitor.JointPosTrackErrService/SetJointPosTrackErrConfig",
  "/humanoid_monitor.JointPosTrackErrService/GetJointPosTrackErrConfig",
};

std::unique_ptr< JointPosTrackErrService::Stub> JointPosTrackErrService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< JointPosTrackErrService::Stub> stub(new JointPosTrackErrService::Stub(channel, options));
  return stub;
}

JointPosTrackErrService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetJointPosTrackErrConfig_(JointPosTrackErrService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointPosTrackErrConfig_(JointPosTrackErrService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status JointPosTrackErrService::Stub::SetJointPosTrackErrConfig(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointPosTrackErrConfigRequest& request, ::humanoid_monitor::SetJointPosTrackErrConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::humanoid_monitor::SetJointPosTrackErrConfigRequest, ::humanoid_monitor::SetJointPosTrackErrConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetJointPosTrackErrConfig_, context, request, response);
}

void JointPosTrackErrService::Stub::async::SetJointPosTrackErrConfig(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointPosTrackErrConfigRequest* request, ::humanoid_monitor::SetJointPosTrackErrConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::humanoid_monitor::SetJointPosTrackErrConfigRequest, ::humanoid_monitor::SetJointPosTrackErrConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointPosTrackErrConfig_, context, request, response, std::move(f));
}

void JointPosTrackErrService::Stub::async::SetJointPosTrackErrConfig(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointPosTrackErrConfigRequest* request, ::humanoid_monitor::SetJointPosTrackErrConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointPosTrackErrConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::humanoid_monitor::SetJointPosTrackErrConfigResponse>* JointPosTrackErrService::Stub::PrepareAsyncSetJointPosTrackErrConfigRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointPosTrackErrConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::humanoid_monitor::SetJointPosTrackErrConfigResponse, ::humanoid_monitor::SetJointPosTrackErrConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetJointPosTrackErrConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::humanoid_monitor::SetJointPosTrackErrConfigResponse>* JointPosTrackErrService::Stub::AsyncSetJointPosTrackErrConfigRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SetJointPosTrackErrConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetJointPosTrackErrConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status JointPosTrackErrService::Stub::GetJointPosTrackErrConfig(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointPosTrackErrConfigRequest& request, ::humanoid_monitor::GetJointPosTrackErrConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::humanoid_monitor::GetJointPosTrackErrConfigRequest, ::humanoid_monitor::GetJointPosTrackErrConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointPosTrackErrConfig_, context, request, response);
}

void JointPosTrackErrService::Stub::async::GetJointPosTrackErrConfig(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointPosTrackErrConfigRequest* request, ::humanoid_monitor::GetJointPosTrackErrConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::humanoid_monitor::GetJointPosTrackErrConfigRequest, ::humanoid_monitor::GetJointPosTrackErrConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointPosTrackErrConfig_, context, request, response, std::move(f));
}

void JointPosTrackErrService::Stub::async::GetJointPosTrackErrConfig(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointPosTrackErrConfigRequest* request, ::humanoid_monitor::GetJointPosTrackErrConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointPosTrackErrConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::humanoid_monitor::GetJointPosTrackErrConfigResponse>* JointPosTrackErrService::Stub::PrepareAsyncGetJointPosTrackErrConfigRaw(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointPosTrackErrConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::humanoid_monitor::GetJointPosTrackErrConfigResponse, ::humanoid_monitor::GetJointPosTrackErrConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointPosTrackErrConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::humanoid_monitor::GetJointPosTrackErrConfigResponse>* JointPosTrackErrService::Stub::AsyncGetJointPosTrackErrConfigRaw(::grpc::ClientContext* context, const ::humanoid_monitor::GetJointPosTrackErrConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointPosTrackErrConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

JointPosTrackErrService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JointPosTrackErrService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JointPosTrackErrService::Service, ::humanoid_monitor::SetJointPosTrackErrConfigRequest, ::humanoid_monitor::SetJointPosTrackErrConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JointPosTrackErrService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::humanoid_monitor::SetJointPosTrackErrConfigRequest* req,
             ::humanoid_monitor::SetJointPosTrackErrConfigResponse* resp) {
               return service->SetJointPosTrackErrConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JointPosTrackErrService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JointPosTrackErrService::Service, ::humanoid_monitor::GetJointPosTrackErrConfigRequest, ::humanoid_monitor::GetJointPosTrackErrConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JointPosTrackErrService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::humanoid_monitor::GetJointPosTrackErrConfigRequest* req,
             ::humanoid_monitor::GetJointPosTrackErrConfigResponse* resp) {
               return service->GetJointPosTrackErrConfig(ctx, req, resp);
             }, this)));
}

JointPosTrackErrService::Service::~Service() {
}

::grpc::Status JointPosTrackErrService::Service::SetJointPosTrackErrConfig(::grpc::ServerContext* context, const ::humanoid_monitor::SetJointPosTrackErrConfigRequest* request, ::humanoid_monitor::SetJointPosTrackErrConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status JointPosTrackErrService::Service::GetJointPosTrackErrConfig(::grpc::ServerContext* context, const ::humanoid_monitor::GetJointPosTrackErrConfigRequest* request, ::humanoid_monitor::GetJointPosTrackErrConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace humanoid_monitor

