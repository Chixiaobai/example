// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: humanoid_monitor.proto
// Protobuf C++ Version: 5.29.0

#ifndef humanoid_5fmonitor_2eproto_2epb_2eh
#define humanoid_5fmonitor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_humanoid_5fmonitor_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_humanoid_5fmonitor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_humanoid_5fmonitor_2eproto;
namespace humanoid_monitor {
class PositionData;
struct PositionDataDefaultTypeInternal;
extern PositionDataDefaultTypeInternal _PositionData_default_instance_;
class PositionData_JointPositionsEntry_DoNotUse;
struct PositionData_JointPositionsEntry_DoNotUseDefaultTypeInternal;
extern PositionData_JointPositionsEntry_DoNotUseDefaultTypeInternal _PositionData_JointPositionsEntry_DoNotUse_default_instance_;
class SecurityState;
struct SecurityStateDefaultTypeInternal;
extern SecurityStateDefaultTypeInternal _SecurityState_default_instance_;
class SpeedData;
struct SpeedDataDefaultTypeInternal;
extern SpeedDataDefaultTypeInternal _SpeedData_default_instance_;
class SpeedData_JointSpeedsEntry_DoNotUse;
struct SpeedData_JointSpeedsEntry_DoNotUseDefaultTypeInternal;
extern SpeedData_JointSpeedsEntry_DoNotUseDefaultTypeInternal _SpeedData_JointSpeedsEntry_DoNotUse_default_instance_;
class SubscribeStateRequest;
struct SubscribeStateRequestDefaultTypeInternal;
extern SubscribeStateRequestDefaultTypeInternal _SubscribeStateRequest_default_instance_;
class VersionResponse;
struct VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
class VersionResponse_FunctionsEntry_DoNotUse;
struct VersionResponse_FunctionsEntry_DoNotUseDefaultTypeInternal;
extern VersionResponse_FunctionsEntry_DoNotUseDefaultTypeInternal _VersionResponse_FunctionsEntry_DoNotUse_default_instance_;
}  // namespace humanoid_monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace humanoid_monitor {

// ===================================================================


// -------------------------------------------------------------------

class VersionResponse_FunctionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  VersionResponse_FunctionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VersionResponse_FunctionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit VersionResponse_FunctionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const VersionResponse_FunctionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse_FunctionsEntry_DoNotUse*>(
        &_VersionResponse_FunctionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_humanoid_5fmonitor_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SubscribeStateRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:humanoid_monitor.SubscribeStateRequest) */ {
 public:
  inline SubscribeStateRequest() : SubscribeStateRequest(nullptr) {}
  ~SubscribeStateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeStateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeStateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeStateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeStateRequest(const SubscribeStateRequest& from) : SubscribeStateRequest(nullptr, from) {}
  inline SubscribeStateRequest(SubscribeStateRequest&& from) noexcept
      : SubscribeStateRequest(nullptr, std::move(from)) {}
  inline SubscribeStateRequest& operator=(const SubscribeStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStateRequest& operator=(SubscribeStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeStateRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStateRequest*>(
        &_SubscribeStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SubscribeStateRequest& a, SubscribeStateRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeStateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeStateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeStateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeStateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeStateRequest& from) { SubscribeStateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeStateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "humanoid_monitor.SubscribeStateRequest"; }

 protected:
  explicit SubscribeStateRequest(::google::protobuf::Arena* arena);
  SubscribeStateRequest(::google::protobuf::Arena* arena, const SubscribeStateRequest& from);
  SubscribeStateRequest(::google::protobuf::Arena* arena, SubscribeStateRequest&& from) noexcept
      : SubscribeStateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
    kSampleRateFieldNumber = 2,
    kIncludeSpeedDataFieldNumber = 3,
    kIncludePositionDataFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // uint32 sample_rate = 2;
  void clear_sample_rate() ;
  ::uint32_t sample_rate() const;
  void set_sample_rate(::uint32_t value);

  private:
  ::uint32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(::uint32_t value);

  public:
  // bool include_speed_data = 3;
  void clear_include_speed_data() ;
  bool include_speed_data() const;
  void set_include_speed_data(bool value);

  private:
  bool _internal_include_speed_data() const;
  void _internal_set_include_speed_data(bool value);

  public:
  // bool include_position_data = 4;
  void clear_include_position_data() ;
  bool include_position_data() const;
  void set_include_position_data(bool value);

  private:
  bool _internal_include_position_data() const;
  void _internal_set_include_position_data(bool value);

  public:
  // @@protoc_insertion_point(class_scope:humanoid_monitor.SubscribeStateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeStateRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    ::uint32_t sample_rate_;
    bool include_speed_data_;
    bool include_position_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_humanoid_5fmonitor_2eproto;
};
// -------------------------------------------------------------------

class SpeedData_JointSpeedsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ::int32_t, float,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ::int32_t, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>;
  SpeedData_JointSpeedsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpeedData_JointSpeedsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SpeedData_JointSpeedsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SpeedData_JointSpeedsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SpeedData_JointSpeedsEntry_DoNotUse*>(
        &_SpeedData_JointSpeedsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_humanoid_5fmonitor_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PositionData_JointPositionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ::int32_t, float,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ::int32_t, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>;
  PositionData_JointPositionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PositionData_JointPositionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PositionData_JointPositionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PositionData_JointPositionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PositionData_JointPositionsEntry_DoNotUse*>(
        &_PositionData_JointPositionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_humanoid_5fmonitor_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class VersionResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:humanoid_monitor.VersionResponse) */ {
 public:
  inline VersionResponse() : VersionResponse(nullptr) {}
  ~VersionResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VersionResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VersionResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VersionResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline VersionResponse(const VersionResponse& from) : VersionResponse(nullptr, from) {}
  inline VersionResponse(VersionResponse&& from) noexcept
      : VersionResponse(nullptr, std::move(from)) {}
  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
        &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(VersionResponse& a, VersionResponse& b) { a.Swap(&b); }
  inline void Swap(VersionResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VersionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VersionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VersionResponse& from) { VersionResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VersionResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "humanoid_monitor.VersionResponse"; }

 protected:
  explicit VersionResponse(::google::protobuf::Arena* arena);
  VersionResponse(::google::protobuf::Arena* arena, const VersionResponse& from);
  VersionResponse(::google::protobuf::Arena* arena, VersionResponse&& from) noexcept
      : VersionResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFunctionsFieldNumber = 3,
    kMainFieldNumber = 1,
    kRobotFieldNumber = 2,
  };
  // map<string, string> functions = 3;
  int functions_size() const;
  private:
  int _internal_functions_size() const;

  public:
  void clear_functions() ;
  const ::google::protobuf::Map<std::string, std::string>& functions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_functions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_functions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_functions();

  public:
  // string main = 1;
  void clear_main() ;
  const std::string& main() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_main(Arg_&& arg, Args_... args);
  std::string* mutable_main();
  PROTOBUF_NODISCARD std::string* release_main();
  void set_allocated_main(std::string* value);

  private:
  const std::string& _internal_main() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main(
      const std::string& value);
  std::string* _internal_mutable_main();

  public:
  // string robot = 2;
  void clear_robot() ;
  const std::string& robot() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_robot(Arg_&& arg, Args_... args);
  std::string* mutable_robot();
  PROTOBUF_NODISCARD std::string* release_robot();
  void set_allocated_robot(std::string* value);

  private:
  const std::string& _internal_robot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot(
      const std::string& value);
  std::string* _internal_mutable_robot();

  public:
  // @@protoc_insertion_point(class_scope:humanoid_monitor.VersionResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VersionResponse& from_msg);
    ::google::protobuf::internal::MapField<VersionResponse_FunctionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        functions_;
    ::google::protobuf::internal::ArenaStringPtr main_;
    ::google::protobuf::internal::ArenaStringPtr robot_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_humanoid_5fmonitor_2eproto;
};
// -------------------------------------------------------------------

class SpeedData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:humanoid_monitor.SpeedData) */ {
 public:
  inline SpeedData() : SpeedData(nullptr) {}
  ~SpeedData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpeedData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpeedData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpeedData(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpeedData(const SpeedData& from) : SpeedData(nullptr, from) {}
  inline SpeedData(SpeedData&& from) noexcept
      : SpeedData(nullptr, std::move(from)) {}
  inline SpeedData& operator=(const SpeedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedData& operator=(SpeedData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeedData* internal_default_instance() {
    return reinterpret_cast<const SpeedData*>(
        &_SpeedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SpeedData& a, SpeedData& b) { a.Swap(&b); }
  inline void Swap(SpeedData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpeedData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpeedData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpeedData& from) { SpeedData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpeedData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "humanoid_monitor.SpeedData"; }

 protected:
  explicit SpeedData(::google::protobuf::Arena* arena);
  SpeedData(::google::protobuf::Arena* arena, const SpeedData& from);
  SpeedData(::google::protobuf::Arena* arena, SpeedData&& from) noexcept
      : SpeedData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kJointSpeedsFieldNumber = 2,
    kIsOverspeedFieldNumber = 1,
  };
  // map<int32, float> joint_speeds = 2;
  int joint_speeds_size() const;
  private:
  int _internal_joint_speeds_size() const;

  public:
  void clear_joint_speeds() ;
  const ::google::protobuf::Map<::int32_t, float>& joint_speeds() const;
  ::google::protobuf::Map<::int32_t, float>* mutable_joint_speeds();

  private:
  const ::google::protobuf::Map<::int32_t, float>& _internal_joint_speeds() const;
  ::google::protobuf::Map<::int32_t, float>* _internal_mutable_joint_speeds();

  public:
  // bool is_overspeed = 1;
  void clear_is_overspeed() ;
  bool is_overspeed() const;
  void set_is_overspeed(bool value);

  private:
  bool _internal_is_overspeed() const;
  void _internal_set_is_overspeed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:humanoid_monitor.SpeedData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpeedData& from_msg);
    ::google::protobuf::internal::MapField<SpeedData_JointSpeedsEntry_DoNotUse, ::int32_t, float,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>
        joint_speeds_;
    bool is_overspeed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_humanoid_5fmonitor_2eproto;
};
// -------------------------------------------------------------------

class PositionData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:humanoid_monitor.PositionData) */ {
 public:
  inline PositionData() : PositionData(nullptr) {}
  ~PositionData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PositionData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PositionData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PositionData(
      ::google::protobuf::internal::ConstantInitialized);

  inline PositionData(const PositionData& from) : PositionData(nullptr, from) {}
  inline PositionData(PositionData&& from) noexcept
      : PositionData(nullptr, std::move(from)) {}
  inline PositionData& operator=(const PositionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionData& operator=(PositionData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionData* internal_default_instance() {
    return reinterpret_cast<const PositionData*>(
        &_PositionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PositionData& a, PositionData& b) { a.Swap(&b); }
  inline void Swap(PositionData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PositionData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PositionData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PositionData& from) { PositionData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PositionData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "humanoid_monitor.PositionData"; }

 protected:
  explicit PositionData(::google::protobuf::Arena* arena);
  PositionData(::google::protobuf::Arena* arena, const PositionData& from);
  PositionData(::google::protobuf::Arena* arena, PositionData&& from) noexcept
      : PositionData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kJointPositionsFieldNumber = 2,
    kIsOutPositionFieldNumber = 1,
  };
  // map<int32, float> joint_positions = 2;
  int joint_positions_size() const;
  private:
  int _internal_joint_positions_size() const;

  public:
  void clear_joint_positions() ;
  const ::google::protobuf::Map<::int32_t, float>& joint_positions() const;
  ::google::protobuf::Map<::int32_t, float>* mutable_joint_positions();

  private:
  const ::google::protobuf::Map<::int32_t, float>& _internal_joint_positions() const;
  ::google::protobuf::Map<::int32_t, float>* _internal_mutable_joint_positions();

  public:
  // bool is_out_position = 1;
  void clear_is_out_position() ;
  bool is_out_position() const;
  void set_is_out_position(bool value);

  private:
  bool _internal_is_out_position() const;
  void _internal_set_is_out_position(bool value);

  public:
  // @@protoc_insertion_point(class_scope:humanoid_monitor.PositionData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PositionData& from_msg);
    ::google::protobuf::internal::MapField<PositionData_JointPositionsEntry_DoNotUse, ::int32_t, float,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>
        joint_positions_;
    bool is_out_position_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_humanoid_5fmonitor_2eproto;
};
// -------------------------------------------------------------------

class SecurityState final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:humanoid_monitor.SecurityState) */ {
 public:
  inline SecurityState() : SecurityState(nullptr) {}
  ~SecurityState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SecurityState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SecurityState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityState(
      ::google::protobuf::internal::ConstantInitialized);

  inline SecurityState(const SecurityState& from) : SecurityState(nullptr, from) {}
  inline SecurityState(SecurityState&& from) noexcept
      : SecurityState(nullptr, std::move(from)) {}
  inline SecurityState& operator=(const SecurityState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityState& operator=(SecurityState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityState* internal_default_instance() {
    return reinterpret_cast<const SecurityState*>(
        &_SecurityState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SecurityState& a, SecurityState& b) { a.Swap(&b); }
  inline void Swap(SecurityState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SecurityState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SecurityState& from) { SecurityState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SecurityState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "humanoid_monitor.SecurityState"; }

 protected:
  explicit SecurityState(::google::protobuf::Arena* arena);
  SecurityState(::google::protobuf::Arena* arena, const SecurityState& from);
  SecurityState(::google::protobuf::Arena* arena, SecurityState&& from) noexcept
      : SecurityState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampFieldNumber = 1,
    kSpeedDataFieldNumber = 2,
    kPositionDataFieldNumber = 3,
  };
  // string timestamp = 1;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // .humanoid_monitor.SpeedData speed_data = 2;
  bool has_speed_data() const;
  void clear_speed_data() ;
  const ::humanoid_monitor::SpeedData& speed_data() const;
  PROTOBUF_NODISCARD ::humanoid_monitor::SpeedData* release_speed_data();
  ::humanoid_monitor::SpeedData* mutable_speed_data();
  void set_allocated_speed_data(::humanoid_monitor::SpeedData* value);
  void unsafe_arena_set_allocated_speed_data(::humanoid_monitor::SpeedData* value);
  ::humanoid_monitor::SpeedData* unsafe_arena_release_speed_data();

  private:
  const ::humanoid_monitor::SpeedData& _internal_speed_data() const;
  ::humanoid_monitor::SpeedData* _internal_mutable_speed_data();

  public:
  // .humanoid_monitor.PositionData position_data = 3;
  bool has_position_data() const;
  void clear_position_data() ;
  const ::humanoid_monitor::PositionData& position_data() const;
  PROTOBUF_NODISCARD ::humanoid_monitor::PositionData* release_position_data();
  ::humanoid_monitor::PositionData* mutable_position_data();
  void set_allocated_position_data(::humanoid_monitor::PositionData* value);
  void unsafe_arena_set_allocated_position_data(::humanoid_monitor::PositionData* value);
  ::humanoid_monitor::PositionData* unsafe_arena_release_position_data();

  private:
  const ::humanoid_monitor::PositionData& _internal_position_data() const;
  ::humanoid_monitor::PositionData* _internal_mutable_position_data();

  public:
  // @@protoc_insertion_point(class_scope:humanoid_monitor.SecurityState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SecurityState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::humanoid_monitor::SpeedData* speed_data_;
    ::humanoid_monitor::PositionData* position_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_humanoid_5fmonitor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SpeedData

// bool is_overspeed = 1;
inline void SpeedData::clear_is_overspeed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_overspeed_ = false;
}
inline bool SpeedData::is_overspeed() const {
  // @@protoc_insertion_point(field_get:humanoid_monitor.SpeedData.is_overspeed)
  return _internal_is_overspeed();
}
inline void SpeedData::set_is_overspeed(bool value) {
  _internal_set_is_overspeed(value);
  // @@protoc_insertion_point(field_set:humanoid_monitor.SpeedData.is_overspeed)
}
inline bool SpeedData::_internal_is_overspeed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_overspeed_;
}
inline void SpeedData::_internal_set_is_overspeed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_overspeed_ = value;
}

// map<int32, float> joint_speeds = 2;
inline int SpeedData::_internal_joint_speeds_size() const {
  return _internal_joint_speeds().size();
}
inline int SpeedData::joint_speeds_size() const {
  return _internal_joint_speeds_size();
}
inline void SpeedData::clear_joint_speeds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joint_speeds_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, float>& SpeedData::_internal_joint_speeds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.joint_speeds_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, float>& SpeedData::joint_speeds() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:humanoid_monitor.SpeedData.joint_speeds)
  return _internal_joint_speeds();
}
inline ::google::protobuf::Map<::int32_t, float>* SpeedData::_internal_mutable_joint_speeds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.joint_speeds_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, float>* SpeedData::mutable_joint_speeds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:humanoid_monitor.SpeedData.joint_speeds)
  return _internal_mutable_joint_speeds();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PositionData

// bool is_out_position = 1;
inline void PositionData::clear_is_out_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_out_position_ = false;
}
inline bool PositionData::is_out_position() const {
  // @@protoc_insertion_point(field_get:humanoid_monitor.PositionData.is_out_position)
  return _internal_is_out_position();
}
inline void PositionData::set_is_out_position(bool value) {
  _internal_set_is_out_position(value);
  // @@protoc_insertion_point(field_set:humanoid_monitor.PositionData.is_out_position)
}
inline bool PositionData::_internal_is_out_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_out_position_;
}
inline void PositionData::_internal_set_is_out_position(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_out_position_ = value;
}

// map<int32, float> joint_positions = 2;
inline int PositionData::_internal_joint_positions_size() const {
  return _internal_joint_positions().size();
}
inline int PositionData::joint_positions_size() const {
  return _internal_joint_positions_size();
}
inline void PositionData::clear_joint_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joint_positions_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, float>& PositionData::_internal_joint_positions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.joint_positions_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, float>& PositionData::joint_positions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:humanoid_monitor.PositionData.joint_positions)
  return _internal_joint_positions();
}
inline ::google::protobuf::Map<::int32_t, float>* PositionData::_internal_mutable_joint_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.joint_positions_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, float>* PositionData::mutable_joint_positions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:humanoid_monitor.PositionData.joint_positions)
  return _internal_mutable_joint_positions();
}

// -------------------------------------------------------------------

// SecurityState

// string timestamp = 1;
inline void SecurityState::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& SecurityState::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:humanoid_monitor.SecurityState.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityState::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:humanoid_monitor.SecurityState.timestamp)
}
inline std::string* SecurityState::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:humanoid_monitor.SecurityState.timestamp)
  return _s;
}
inline const std::string& SecurityState::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void SecurityState::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* SecurityState::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* SecurityState::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:humanoid_monitor.SecurityState.timestamp)
  return _impl_.timestamp_.Release();
}
inline void SecurityState::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:humanoid_monitor.SecurityState.timestamp)
}

// .humanoid_monitor.SpeedData speed_data = 2;
inline bool SecurityState::has_speed_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_data_ != nullptr);
  return value;
}
inline void SecurityState::clear_speed_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_data_ != nullptr) _impl_.speed_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::humanoid_monitor::SpeedData& SecurityState::_internal_speed_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::humanoid_monitor::SpeedData* p = _impl_.speed_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::humanoid_monitor::SpeedData&>(::humanoid_monitor::_SpeedData_default_instance_);
}
inline const ::humanoid_monitor::SpeedData& SecurityState::speed_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:humanoid_monitor.SecurityState.speed_data)
  return _internal_speed_data();
}
inline void SecurityState::unsafe_arena_set_allocated_speed_data(::humanoid_monitor::SpeedData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_data_);
  }
  _impl_.speed_data_ = reinterpret_cast<::humanoid_monitor::SpeedData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:humanoid_monitor.SecurityState.speed_data)
}
inline ::humanoid_monitor::SpeedData* SecurityState::release_speed_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::humanoid_monitor::SpeedData* released = _impl_.speed_data_;
  _impl_.speed_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::humanoid_monitor::SpeedData* SecurityState::unsafe_arena_release_speed_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:humanoid_monitor.SecurityState.speed_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::humanoid_monitor::SpeedData* temp = _impl_.speed_data_;
  _impl_.speed_data_ = nullptr;
  return temp;
}
inline ::humanoid_monitor::SpeedData* SecurityState::_internal_mutable_speed_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::humanoid_monitor::SpeedData>(GetArena());
    _impl_.speed_data_ = reinterpret_cast<::humanoid_monitor::SpeedData*>(p);
  }
  return _impl_.speed_data_;
}
inline ::humanoid_monitor::SpeedData* SecurityState::mutable_speed_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::humanoid_monitor::SpeedData* _msg = _internal_mutable_speed_data();
  // @@protoc_insertion_point(field_mutable:humanoid_monitor.SecurityState.speed_data)
  return _msg;
}
inline void SecurityState::set_allocated_speed_data(::humanoid_monitor::SpeedData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.speed_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.speed_data_ = reinterpret_cast<::humanoid_monitor::SpeedData*>(value);
  // @@protoc_insertion_point(field_set_allocated:humanoid_monitor.SecurityState.speed_data)
}

// .humanoid_monitor.PositionData position_data = 3;
inline bool SecurityState::has_position_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_data_ != nullptr);
  return value;
}
inline void SecurityState::clear_position_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_data_ != nullptr) _impl_.position_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::humanoid_monitor::PositionData& SecurityState::_internal_position_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::humanoid_monitor::PositionData* p = _impl_.position_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::humanoid_monitor::PositionData&>(::humanoid_monitor::_PositionData_default_instance_);
}
inline const ::humanoid_monitor::PositionData& SecurityState::position_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:humanoid_monitor.SecurityState.position_data)
  return _internal_position_data();
}
inline void SecurityState::unsafe_arena_set_allocated_position_data(::humanoid_monitor::PositionData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_data_);
  }
  _impl_.position_data_ = reinterpret_cast<::humanoid_monitor::PositionData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:humanoid_monitor.SecurityState.position_data)
}
inline ::humanoid_monitor::PositionData* SecurityState::release_position_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::humanoid_monitor::PositionData* released = _impl_.position_data_;
  _impl_.position_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::humanoid_monitor::PositionData* SecurityState::unsafe_arena_release_position_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:humanoid_monitor.SecurityState.position_data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::humanoid_monitor::PositionData* temp = _impl_.position_data_;
  _impl_.position_data_ = nullptr;
  return temp;
}
inline ::humanoid_monitor::PositionData* SecurityState::_internal_mutable_position_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::humanoid_monitor::PositionData>(GetArena());
    _impl_.position_data_ = reinterpret_cast<::humanoid_monitor::PositionData*>(p);
  }
  return _impl_.position_data_;
}
inline ::humanoid_monitor::PositionData* SecurityState::mutable_position_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::humanoid_monitor::PositionData* _msg = _internal_mutable_position_data();
  // @@protoc_insertion_point(field_mutable:humanoid_monitor.SecurityState.position_data)
  return _msg;
}
inline void SecurityState::set_allocated_position_data(::humanoid_monitor::PositionData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.position_data_ = reinterpret_cast<::humanoid_monitor::PositionData*>(value);
  // @@protoc_insertion_point(field_set_allocated:humanoid_monitor.SecurityState.position_data)
}

// -------------------------------------------------------------------

// SubscribeStateRequest

// string client_id = 1;
inline void SubscribeStateRequest::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& SubscribeStateRequest::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:humanoid_monitor.SubscribeStateRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeStateRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:humanoid_monitor.SubscribeStateRequest.client_id)
}
inline std::string* SubscribeStateRequest::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:humanoid_monitor.SubscribeStateRequest.client_id)
  return _s;
}
inline const std::string& SubscribeStateRequest::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_.Get();
}
inline void SubscribeStateRequest::_internal_set_client_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* SubscribeStateRequest::_internal_mutable_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* SubscribeStateRequest::release_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:humanoid_monitor.SubscribeStateRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void SubscribeStateRequest::set_allocated_client_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:humanoid_monitor.SubscribeStateRequest.client_id)
}

// uint32 sample_rate = 2;
inline void SubscribeStateRequest::clear_sample_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_rate_ = 0u;
}
inline ::uint32_t SubscribeStateRequest::sample_rate() const {
  // @@protoc_insertion_point(field_get:humanoid_monitor.SubscribeStateRequest.sample_rate)
  return _internal_sample_rate();
}
inline void SubscribeStateRequest::set_sample_rate(::uint32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:humanoid_monitor.SubscribeStateRequest.sample_rate)
}
inline ::uint32_t SubscribeStateRequest::_internal_sample_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sample_rate_;
}
inline void SubscribeStateRequest::_internal_set_sample_rate(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_rate_ = value;
}

// bool include_speed_data = 3;
inline void SubscribeStateRequest::clear_include_speed_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_speed_data_ = false;
}
inline bool SubscribeStateRequest::include_speed_data() const {
  // @@protoc_insertion_point(field_get:humanoid_monitor.SubscribeStateRequest.include_speed_data)
  return _internal_include_speed_data();
}
inline void SubscribeStateRequest::set_include_speed_data(bool value) {
  _internal_set_include_speed_data(value);
  // @@protoc_insertion_point(field_set:humanoid_monitor.SubscribeStateRequest.include_speed_data)
}
inline bool SubscribeStateRequest::_internal_include_speed_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_speed_data_;
}
inline void SubscribeStateRequest::_internal_set_include_speed_data(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_speed_data_ = value;
}

// bool include_position_data = 4;
inline void SubscribeStateRequest::clear_include_position_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_position_data_ = false;
}
inline bool SubscribeStateRequest::include_position_data() const {
  // @@protoc_insertion_point(field_get:humanoid_monitor.SubscribeStateRequest.include_position_data)
  return _internal_include_position_data();
}
inline void SubscribeStateRequest::set_include_position_data(bool value) {
  _internal_set_include_position_data(value);
  // @@protoc_insertion_point(field_set:humanoid_monitor.SubscribeStateRequest.include_position_data)
}
inline bool SubscribeStateRequest::_internal_include_position_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_position_data_;
}
inline void SubscribeStateRequest::_internal_set_include_position_data(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_position_data_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VersionResponse

// string main = 1;
inline void VersionResponse::clear_main() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.main_.ClearToEmpty();
}
inline const std::string& VersionResponse::main() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:humanoid_monitor.VersionResponse.main)
  return _internal_main();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionResponse::set_main(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.main_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:humanoid_monitor.VersionResponse.main)
}
inline std::string* VersionResponse::mutable_main() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_main();
  // @@protoc_insertion_point(field_mutable:humanoid_monitor.VersionResponse.main)
  return _s;
}
inline const std::string& VersionResponse::_internal_main() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.main_.Get();
}
inline void VersionResponse::_internal_set_main(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.main_.Set(value, GetArena());
}
inline std::string* VersionResponse::_internal_mutable_main() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.main_.Mutable( GetArena());
}
inline std::string* VersionResponse::release_main() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:humanoid_monitor.VersionResponse.main)
  return _impl_.main_.Release();
}
inline void VersionResponse::set_allocated_main(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.main_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.main_.IsDefault()) {
    _impl_.main_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:humanoid_monitor.VersionResponse.main)
}

// string robot = 2;
inline void VersionResponse::clear_robot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.robot_.ClearToEmpty();
}
inline const std::string& VersionResponse::robot() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:humanoid_monitor.VersionResponse.robot)
  return _internal_robot();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionResponse::set_robot(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.robot_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:humanoid_monitor.VersionResponse.robot)
}
inline std::string* VersionResponse::mutable_robot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_robot();
  // @@protoc_insertion_point(field_mutable:humanoid_monitor.VersionResponse.robot)
  return _s;
}
inline const std::string& VersionResponse::_internal_robot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.robot_.Get();
}
inline void VersionResponse::_internal_set_robot(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.robot_.Set(value, GetArena());
}
inline std::string* VersionResponse::_internal_mutable_robot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.robot_.Mutable( GetArena());
}
inline std::string* VersionResponse::release_robot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:humanoid_monitor.VersionResponse.robot)
  return _impl_.robot_.Release();
}
inline void VersionResponse::set_allocated_robot(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.robot_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.robot_.IsDefault()) {
    _impl_.robot_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:humanoid_monitor.VersionResponse.robot)
}

// map<string, string> functions = 3;
inline int VersionResponse::_internal_functions_size() const {
  return _internal_functions().size();
}
inline int VersionResponse::functions_size() const {
  return _internal_functions_size();
}
inline void VersionResponse::clear_functions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.functions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& VersionResponse::_internal_functions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.functions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& VersionResponse::functions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:humanoid_monitor.VersionResponse.functions)
  return _internal_functions();
}
inline ::google::protobuf::Map<std::string, std::string>* VersionResponse::_internal_mutable_functions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.functions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* VersionResponse::mutable_functions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:humanoid_monitor.VersionResponse.functions)
  return _internal_mutable_functions();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace humanoid_monitor


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // humanoid_5fmonitor_2eproto_2epb_2eh
