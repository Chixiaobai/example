// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: humanoid_monitor.proto
#ifndef GRPC_humanoid_5fmonitor_2eproto__INCLUDED
#define GRPC_humanoid_5fmonitor_2eproto__INCLUDED

#include "humanoid_monitor.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace humanoid_monitor {

class HumanoidMonitorService final {
 public:
  static constexpr char const* service_full_name() {
    return "humanoid_monitor.HumanoidMonitorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::humanoid_monitor::SecurityState>> SubscribeState(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::humanoid_monitor::SecurityState>>(SubscribeStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::humanoid_monitor::SecurityState>> AsyncSubscribeState(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::humanoid_monitor::SecurityState>>(AsyncSubscribeStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::humanoid_monitor::SecurityState>> PrepareAsyncSubscribeState(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::humanoid_monitor::SecurityState>>(PrepareAsyncSubscribeStateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::humanoid_monitor::VersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::humanoid_monitor::VersionResponse>> AsyncGetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::humanoid_monitor::VersionResponse>>(AsyncGetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::humanoid_monitor::VersionResponse>> PrepareAsyncGetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::humanoid_monitor::VersionResponse>>(PrepareAsyncGetVersionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SubscribeState(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest* request, ::grpc::ClientReadReactor< ::humanoid_monitor::SecurityState>* reactor) = 0;
      virtual void GetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::humanoid_monitor::VersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::humanoid_monitor::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::humanoid_monitor::SecurityState>* SubscribeStateRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::humanoid_monitor::SecurityState>* AsyncSubscribeStateRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::humanoid_monitor::SecurityState>* PrepareAsyncSubscribeStateRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::humanoid_monitor::VersionResponse>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::humanoid_monitor::VersionResponse>* PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::humanoid_monitor::SecurityState>> SubscribeState(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::humanoid_monitor::SecurityState>>(SubscribeStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::humanoid_monitor::SecurityState>> AsyncSubscribeState(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::humanoid_monitor::SecurityState>>(AsyncSubscribeStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::humanoid_monitor::SecurityState>> PrepareAsyncSubscribeState(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::humanoid_monitor::SecurityState>>(PrepareAsyncSubscribeStateRaw(context, request, cq));
    }
    ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::humanoid_monitor::VersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::humanoid_monitor::VersionResponse>> AsyncGetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::humanoid_monitor::VersionResponse>>(AsyncGetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::humanoid_monitor::VersionResponse>> PrepareAsyncGetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::humanoid_monitor::VersionResponse>>(PrepareAsyncGetVersionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubscribeState(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest* request, ::grpc::ClientReadReactor< ::humanoid_monitor::SecurityState>* reactor) override;
      void GetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::humanoid_monitor::VersionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::humanoid_monitor::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::humanoid_monitor::SecurityState>* SubscribeStateRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request) override;
    ::grpc::ClientAsyncReader< ::humanoid_monitor::SecurityState>* AsyncSubscribeStateRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::humanoid_monitor::SecurityState>* PrepareAsyncSubscribeStateRaw(::grpc::ClientContext* context, const ::humanoid_monitor::SubscribeStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::humanoid_monitor::VersionResponse>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::humanoid_monitor::VersionResponse>* PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeState_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVersion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SubscribeState(::grpc::ServerContext* context, const ::humanoid_monitor::SubscribeStateRequest* request, ::grpc::ServerWriter< ::humanoid_monitor::SecurityState>* writer);
    virtual ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::humanoid_monitor::VersionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeState(::grpc::ServerContext* /*context*/, const ::humanoid_monitor::SubscribeStateRequest* /*request*/, ::grpc::ServerWriter< ::humanoid_monitor::SecurityState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeState(::grpc::ServerContext* context, ::humanoid_monitor::SubscribeStateRequest* request, ::grpc::ServerAsyncWriter< ::humanoid_monitor::SecurityState>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVersion() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::humanoid_monitor::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersion(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::humanoid_monitor::VersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeState<WithAsyncMethod_GetVersion<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubscribeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeState() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::humanoid_monitor::SubscribeStateRequest, ::humanoid_monitor::SecurityState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::humanoid_monitor::SubscribeStateRequest* request) { return this->SubscribeState(context, request); }));
    }
    ~WithCallbackMethod_SubscribeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeState(::grpc::ServerContext* /*context*/, const ::humanoid_monitor::SubscribeStateRequest* /*request*/, ::grpc::ServerWriter< ::humanoid_monitor::SecurityState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::humanoid_monitor::SecurityState>* SubscribeState(
      ::grpc::CallbackServerContext* /*context*/, const ::humanoid_monitor::SubscribeStateRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetVersion() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::humanoid_monitor::VersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::humanoid_monitor::VersionResponse* response) { return this->GetVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetVersion(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::humanoid_monitor::VersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::humanoid_monitor::VersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::humanoid_monitor::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::humanoid_monitor::VersionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubscribeState<WithCallbackMethod_GetVersion<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeState(::grpc::ServerContext* /*context*/, const ::humanoid_monitor::SubscribeStateRequest* /*request*/, ::grpc::ServerWriter< ::humanoid_monitor::SecurityState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVersion() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::humanoid_monitor::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeState(::grpc::ServerContext* /*context*/, const ::humanoid_monitor::SubscribeStateRequest* /*request*/, ::grpc::ServerWriter< ::humanoid_monitor::SecurityState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVersion() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::humanoid_monitor::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeState() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeState(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeState(::grpc::ServerContext* /*context*/, const ::humanoid_monitor::SubscribeStateRequest* /*request*/, ::grpc::ServerWriter< ::humanoid_monitor::SecurityState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetVersion() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::humanoid_monitor::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVersion() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::humanoid_monitor::VersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::humanoid_monitor::VersionResponse>* streamer) {
                       return this->StreamedGetVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::humanoid_monitor::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::humanoid_monitor::VersionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetVersion<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::humanoid_monitor::SubscribeStateRequest, ::humanoid_monitor::SecurityState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::humanoid_monitor::SubscribeStateRequest, ::humanoid_monitor::SecurityState>* streamer) {
                       return this->StreamedSubscribeState(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeState(::grpc::ServerContext* /*context*/, const ::humanoid_monitor::SubscribeStateRequest* /*request*/, ::grpc::ServerWriter< ::humanoid_monitor::SecurityState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeState(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::humanoid_monitor::SubscribeStateRequest,::humanoid_monitor::SecurityState>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeState<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeState<WithStreamedUnaryMethod_GetVersion<Service > > StreamedService;
};

}  // namespace humanoid_monitor


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_humanoid_5fmonitor_2eproto__INCLUDED
