// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: motion_service.proto

#include "motion_service.pb.h"
#include "motion_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace controller {

static const char* MotionService_method_names[] = {
  "/controller.MotionService/RequestSingleJointMove",
  "/controller.MotionService/RequestMultiJointsMove",
  "/controller.MotionService/RequestLinearMove",
  "/controller.MotionService/RequestStop",
  "/controller.MotionService/RequestEnableRealtimeCmd",
  "/controller.MotionService/RequestSetControlPolicy",
};

std::unique_ptr< MotionService::Stub> MotionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MotionService::Stub> stub(new MotionService::Stub(channel, options));
  return stub;
}

MotionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestSingleJointMove_(MotionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestMultiJointsMove_(MotionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestLinearMove_(MotionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestStop_(MotionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestEnableRealtimeCmd_(MotionService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestSetControlPolicy_(MotionService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MotionService::Stub::RequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::controller::JointMoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::JointMoveRequest, ::controller::JointMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestSingleJointMove_, context, request, response);
}

void MotionService::Stub::async::RequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest* request, ::controller::JointMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::JointMoveRequest, ::controller::JointMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestSingleJointMove_, context, request, response, std::move(f));
}

void MotionService::Stub::async::RequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest* request, ::controller::JointMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestSingleJointMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::JointMoveResponse>* MotionService::Stub::PrepareAsyncRequestSingleJointMoveRaw(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::JointMoveResponse, ::controller::JointMoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestSingleJointMove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::JointMoveResponse>* MotionService::Stub::AsyncRequestSingleJointMoveRaw(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestSingleJointMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MotionService::Stub::RequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::controller::MultiJointMoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::MultiJointMoveRequest, ::controller::MultiJointMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestMultiJointsMove_, context, request, response);
}

void MotionService::Stub::async::RequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest* request, ::controller::MultiJointMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::MultiJointMoveRequest, ::controller::MultiJointMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestMultiJointsMove_, context, request, response, std::move(f));
}

void MotionService::Stub::async::RequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest* request, ::controller::MultiJointMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestMultiJointsMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::MultiJointMoveResponse>* MotionService::Stub::PrepareAsyncRequestMultiJointsMoveRaw(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::MultiJointMoveResponse, ::controller::MultiJointMoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestMultiJointsMove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::MultiJointMoveResponse>* MotionService::Stub::AsyncRequestMultiJointsMoveRaw(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestMultiJointsMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MotionService::Stub::RequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::controller::LinearMoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::LinearMoveRequest, ::controller::LinearMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestLinearMove_, context, request, response);
}

void MotionService::Stub::async::RequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest* request, ::controller::LinearMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::LinearMoveRequest, ::controller::LinearMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestLinearMove_, context, request, response, std::move(f));
}

void MotionService::Stub::async::RequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest* request, ::controller::LinearMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestLinearMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::LinearMoveResponse>* MotionService::Stub::PrepareAsyncRequestLinearMoveRaw(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::LinearMoveResponse, ::controller::LinearMoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestLinearMove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::LinearMoveResponse>* MotionService::Stub::AsyncRequestLinearMoveRaw(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestLinearMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MotionService::Stub::RequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestStop_, context, request, response);
}

void MotionService::Stub::async::RequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestStop_, context, request, response, std::move(f));
}

void MotionService::Stub::async::RequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::StopResponse>* MotionService::Stub::PrepareAsyncRequestStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::StopResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::StopResponse>* MotionService::Stub::AsyncRequestStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MotionService::Stub::RequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::controller::EnableRealtimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::EnableRealtimeRequest, ::controller::EnableRealtimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestEnableRealtimeCmd_, context, request, response);
}

void MotionService::Stub::async::RequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest* request, ::controller::EnableRealtimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::EnableRealtimeRequest, ::controller::EnableRealtimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestEnableRealtimeCmd_, context, request, response, std::move(f));
}

void MotionService::Stub::async::RequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest* request, ::controller::EnableRealtimeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestEnableRealtimeCmd_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::EnableRealtimeResponse>* MotionService::Stub::PrepareAsyncRequestEnableRealtimeCmdRaw(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::EnableRealtimeResponse, ::controller::EnableRealtimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestEnableRealtimeCmd_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::EnableRealtimeResponse>* MotionService::Stub::AsyncRequestEnableRealtimeCmdRaw(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestEnableRealtimeCmdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MotionService::Stub::RequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::controller::ControlPolicyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::ControlPolicyRequest, ::controller::ControlPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestSetControlPolicy_, context, request, response);
}

void MotionService::Stub::async::RequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest* request, ::controller::ControlPolicyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::ControlPolicyRequest, ::controller::ControlPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestSetControlPolicy_, context, request, response, std::move(f));
}

void MotionService::Stub::async::RequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest* request, ::controller::ControlPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestSetControlPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::ControlPolicyResponse>* MotionService::Stub::PrepareAsyncRequestSetControlPolicyRaw(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::ControlPolicyResponse, ::controller::ControlPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestSetControlPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::ControlPolicyResponse>* MotionService::Stub::AsyncRequestSetControlPolicyRaw(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestSetControlPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

MotionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::controller::JointMoveRequest, ::controller::JointMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MotionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::JointMoveRequest* req,
             ::controller::JointMoveResponse* resp) {
               return service->RequestSingleJointMove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::controller::MultiJointMoveRequest, ::controller::MultiJointMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MotionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::MultiJointMoveRequest* req,
             ::controller::MultiJointMoveResponse* resp) {
               return service->RequestMultiJointsMove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::controller::LinearMoveRequest, ::controller::LinearMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MotionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::LinearMoveRequest* req,
             ::controller::LinearMoveResponse* resp) {
               return service->RequestLinearMove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::google::protobuf::Empty, ::controller::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MotionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::StopResponse* resp) {
               return service->RequestStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::controller::EnableRealtimeRequest, ::controller::EnableRealtimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MotionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::EnableRealtimeRequest* req,
             ::controller::EnableRealtimeResponse* resp) {
               return service->RequestEnableRealtimeCmd(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::controller::ControlPolicyRequest, ::controller::ControlPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MotionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::ControlPolicyRequest* req,
             ::controller::ControlPolicyResponse* resp) {
               return service->RequestSetControlPolicy(ctx, req, resp);
             }, this)));
}

MotionService::Service::~Service() {
}

::grpc::Status MotionService::Service::RequestSingleJointMove(::grpc::ServerContext* context, const ::controller::JointMoveRequest* request, ::controller::JointMoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::RequestMultiJointsMove(::grpc::ServerContext* context, const ::controller::MultiJointMoveRequest* request, ::controller::MultiJointMoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::RequestLinearMove(::grpc::ServerContext* context, const ::controller::LinearMoveRequest* request, ::controller::LinearMoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::RequestStop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::RequestEnableRealtimeCmd(::grpc::ServerContext* context, const ::controller::EnableRealtimeRequest* request, ::controller::EnableRealtimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::RequestSetControlPolicy(::grpc::ServerContext* context, const ::controller::ControlPolicyRequest* request, ::controller::ControlPolicyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace controller

