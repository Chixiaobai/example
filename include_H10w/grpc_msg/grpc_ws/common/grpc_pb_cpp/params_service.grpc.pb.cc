// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: params_service.proto

#include "params_service.pb.h"
#include "params_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace controller {

static const char* ParamsService_method_names[] = {
  "/controller.ParamsService/SetJointSoftLimit",
  "/controller.ParamsService/SetJointMaxVel",
  "/controller.ParamsService/SetJointMaxAcc",
  "/controller.ParamsService/SetCartesianTranslationMaxVel",
  "/controller.ParamsService/SetCartesianTranslationMaxAcc",
  "/controller.ParamsService/SetCartesianRotationMaxVel",
  "/controller.ParamsService/SetCartesianRotationMaxAcc",
  "/controller.ParamsService/SetTcpOffset",
  "/controller.ParamsService/SetTcpPayload",
  "/controller.ParamsService/GetJointSoftLimit",
  "/controller.ParamsService/GetJointMaxVel",
  "/controller.ParamsService/GetJointMaxAcc",
  "/controller.ParamsService/GetCartesianTranslationMaxVel",
  "/controller.ParamsService/GetCartesianTranslationMaxAcc",
  "/controller.ParamsService/GetCartesianRotationMaxVel",
  "/controller.ParamsService/GetCartesianRotationMaxAcc",
  "/controller.ParamsService/GetTcpOffset",
  "/controller.ParamsService/GetTcpPayload",
  "/controller.ParamsService/ForwardKinematics",
  "/controller.ParamsService/InverseKinematics",
  "/controller.ParamsService/GetJointMechanicalLimit",
  "/controller.ParamsService/GetJointMechanicalMaxVel",
  "/controller.ParamsService/GetJointMechanicalMaxAcc",
  "/controller.ParamsService/GetCartesianMechanicalTranslationMaxVel",
  "/controller.ParamsService/GetCartesianMechanicalTranslationMaxAcc",
  "/controller.ParamsService/GetCartesianMechanicalRotationMaxVel",
  "/controller.ParamsService/GetCartesianMechanicalRotationMaxAcc",
};

std::unique_ptr< ParamsService::Stub> ParamsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ParamsService::Stub> stub(new ParamsService::Stub(channel, options));
  return stub;
}

ParamsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetJointSoftLimit_(ParamsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetJointMaxVel_(ParamsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetJointMaxAcc_(ParamsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCartesianTranslationMaxVel_(ParamsService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCartesianTranslationMaxAcc_(ParamsService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCartesianRotationMaxVel_(ParamsService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCartesianRotationMaxAcc_(ParamsService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTcpOffset_(ParamsService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTcpPayload_(ParamsService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointSoftLimit_(ParamsService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointMaxVel_(ParamsService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointMaxAcc_(ParamsService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCartesianTranslationMaxVel_(ParamsService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCartesianTranslationMaxAcc_(ParamsService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCartesianRotationMaxVel_(ParamsService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCartesianRotationMaxAcc_(ParamsService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTcpOffset_(ParamsService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTcpPayload_(ParamsService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForwardKinematics_(ParamsService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InverseKinematics_(ParamsService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointMechanicalLimit_(ParamsService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointMechanicalMaxVel_(ParamsService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointMechanicalMaxAcc_(ParamsService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCartesianMechanicalTranslationMaxVel_(ParamsService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCartesianMechanicalTranslationMaxAcc_(ParamsService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCartesianMechanicalRotationMaxVel_(ParamsService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCartesianMechanicalRotationMaxAcc_(ParamsService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ParamsService::Stub::SetJointSoftLimit(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest& request, ::controller::SetParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetJointParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetJointSoftLimit_, context, request, response);
}

void ParamsService::Stub::async::SetJointSoftLimit(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest* request, ::controller::SetParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetJointParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointSoftLimit_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::SetJointSoftLimit(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest* request, ::controller::SetParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointSoftLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::PrepareAsyncSetJointSoftLimitRaw(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetParamResponse, ::controller::SetJointParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetJointSoftLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::AsyncSetJointSoftLimitRaw(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetJointSoftLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::SetJointMaxVel(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest& request, ::controller::SetParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetJointParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetJointMaxVel_, context, request, response);
}

void ParamsService::Stub::async::SetJointMaxVel(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest* request, ::controller::SetParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetJointParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointMaxVel_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::SetJointMaxVel(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest* request, ::controller::SetParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointMaxVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::PrepareAsyncSetJointMaxVelRaw(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetParamResponse, ::controller::SetJointParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetJointMaxVel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::AsyncSetJointMaxVelRaw(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetJointMaxVelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::SetJointMaxAcc(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest& request, ::controller::SetParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetJointParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetJointMaxAcc_, context, request, response);
}

void ParamsService::Stub::async::SetJointMaxAcc(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest* request, ::controller::SetParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetJointParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointMaxAcc_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::SetJointMaxAcc(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest* request, ::controller::SetParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointMaxAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::PrepareAsyncSetJointMaxAccRaw(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetParamResponse, ::controller::SetJointParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetJointMaxAcc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::AsyncSetJointMaxAccRaw(::grpc::ClientContext* context, const ::controller::SetJointParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetJointMaxAccRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::SetCartesianTranslationMaxVel(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::controller::SetParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCartesianTranslationMaxVel_, context, request, response);
}

void ParamsService::Stub::async::SetCartesianTranslationMaxVel(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCartesianTranslationMaxVel_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::SetCartesianTranslationMaxVel(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCartesianTranslationMaxVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::PrepareAsyncSetCartesianTranslationMaxVelRaw(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetParamResponse, ::controller::SetCartesianParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCartesianTranslationMaxVel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::AsyncSetCartesianTranslationMaxVelRaw(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCartesianTranslationMaxVelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::SetCartesianTranslationMaxAcc(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::controller::SetParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCartesianTranslationMaxAcc_, context, request, response);
}

void ParamsService::Stub::async::SetCartesianTranslationMaxAcc(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCartesianTranslationMaxAcc_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::SetCartesianTranslationMaxAcc(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCartesianTranslationMaxAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::PrepareAsyncSetCartesianTranslationMaxAccRaw(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetParamResponse, ::controller::SetCartesianParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCartesianTranslationMaxAcc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::AsyncSetCartesianTranslationMaxAccRaw(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCartesianTranslationMaxAccRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::SetCartesianRotationMaxVel(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::controller::SetParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCartesianRotationMaxVel_, context, request, response);
}

void ParamsService::Stub::async::SetCartesianRotationMaxVel(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCartesianRotationMaxVel_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::SetCartesianRotationMaxVel(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCartesianRotationMaxVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::PrepareAsyncSetCartesianRotationMaxVelRaw(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetParamResponse, ::controller::SetCartesianParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCartesianRotationMaxVel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::AsyncSetCartesianRotationMaxVelRaw(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCartesianRotationMaxVelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::SetCartesianRotationMaxAcc(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::controller::SetParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCartesianRotationMaxAcc_, context, request, response);
}

void ParamsService::Stub::async::SetCartesianRotationMaxAcc(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCartesianRotationMaxAcc_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::SetCartesianRotationMaxAcc(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCartesianRotationMaxAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::PrepareAsyncSetCartesianRotationMaxAccRaw(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetParamResponse, ::controller::SetCartesianParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCartesianRotationMaxAcc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::AsyncSetCartesianRotationMaxAccRaw(::grpc::ClientContext* context, const ::controller::SetCartesianParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCartesianRotationMaxAccRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::SetTcpOffset(::grpc::ClientContext* context, const ::controller::SetTcpOffsetParamsRequest& request, ::controller::SetParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetTcpOffsetParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTcpOffset_, context, request, response);
}

void ParamsService::Stub::async::SetTcpOffset(::grpc::ClientContext* context, const ::controller::SetTcpOffsetParamsRequest* request, ::controller::SetParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetTcpOffsetParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTcpOffset_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::SetTcpOffset(::grpc::ClientContext* context, const ::controller::SetTcpOffsetParamsRequest* request, ::controller::SetParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTcpOffset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::PrepareAsyncSetTcpOffsetRaw(::grpc::ClientContext* context, const ::controller::SetTcpOffsetParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetParamResponse, ::controller::SetTcpOffsetParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTcpOffset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::AsyncSetTcpOffsetRaw(::grpc::ClientContext* context, const ::controller::SetTcpOffsetParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTcpOffsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::SetTcpPayload(::grpc::ClientContext* context, const ::controller::SetTcpPayloadParamsRequest& request, ::controller::SetParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetTcpPayloadParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTcpPayload_, context, request, response);
}

void ParamsService::Stub::async::SetTcpPayload(::grpc::ClientContext* context, const ::controller::SetTcpPayloadParamsRequest* request, ::controller::SetParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetTcpPayloadParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTcpPayload_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::SetTcpPayload(::grpc::ClientContext* context, const ::controller::SetTcpPayloadParamsRequest* request, ::controller::SetParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTcpPayload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::PrepareAsyncSetTcpPayloadRaw(::grpc::ClientContext* context, const ::controller::SetTcpPayloadParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetParamResponse, ::controller::SetTcpPayloadParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTcpPayload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetParamResponse>* ParamsService::Stub::AsyncSetTcpPayloadRaw(::grpc::ClientContext* context, const ::controller::SetTcpPayloadParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTcpPayloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetJointSoftLimit(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetJointParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointSoftLimit_, context, request, response);
}

void ParamsService::Stub::async::GetJointSoftLimit(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointSoftLimit_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetJointSoftLimit(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointSoftLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::PrepareAsyncGetJointSoftLimitRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetJointParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointSoftLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::AsyncGetJointSoftLimitRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointSoftLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetJointMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetJointParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointMaxVel_, context, request, response);
}

void ParamsService::Stub::async::GetJointMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMaxVel_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetJointMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMaxVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::PrepareAsyncGetJointMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetJointParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointMaxVel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::AsyncGetJointMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointMaxVelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetJointMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetJointParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointMaxAcc_, context, request, response);
}

void ParamsService::Stub::async::GetJointMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMaxAcc_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetJointMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMaxAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::PrepareAsyncGetJointMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetJointParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointMaxAcc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::AsyncGetJointMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointMaxAccRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetCartesianTranslationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetCartesianParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCartesianTranslationMaxVel_, context, request, response);
}

void ParamsService::Stub::async::GetCartesianTranslationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianTranslationMaxVel_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetCartesianTranslationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianTranslationMaxVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::PrepareAsyncGetCartesianTranslationMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetCartesianParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCartesianTranslationMaxVel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::AsyncGetCartesianTranslationMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCartesianTranslationMaxVelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetCartesianTranslationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetCartesianParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCartesianTranslationMaxAcc_, context, request, response);
}

void ParamsService::Stub::async::GetCartesianTranslationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianTranslationMaxAcc_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetCartesianTranslationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianTranslationMaxAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::PrepareAsyncGetCartesianTranslationMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetCartesianParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCartesianTranslationMaxAcc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::AsyncGetCartesianTranslationMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCartesianTranslationMaxAccRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetCartesianRotationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetCartesianParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCartesianRotationMaxVel_, context, request, response);
}

void ParamsService::Stub::async::GetCartesianRotationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianRotationMaxVel_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetCartesianRotationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianRotationMaxVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::PrepareAsyncGetCartesianRotationMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetCartesianParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCartesianRotationMaxVel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::AsyncGetCartesianRotationMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCartesianRotationMaxVelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetCartesianRotationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetCartesianParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCartesianRotationMaxAcc_, context, request, response);
}

void ParamsService::Stub::async::GetCartesianRotationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianRotationMaxAcc_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetCartesianRotationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianRotationMaxAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::PrepareAsyncGetCartesianRotationMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetCartesianParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCartesianRotationMaxAcc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::AsyncGetCartesianRotationMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCartesianRotationMaxAccRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetTcpOffset(::grpc::ClientContext* context, const ::controller::GetTcpOffsetRequest& request, ::controller::GetTcpOffsetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::GetTcpOffsetRequest, ::controller::GetTcpOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTcpOffset_, context, request, response);
}

void ParamsService::Stub::async::GetTcpOffset(::grpc::ClientContext* context, const ::controller::GetTcpOffsetRequest* request, ::controller::GetTcpOffsetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::GetTcpOffsetRequest, ::controller::GetTcpOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTcpOffset_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetTcpOffset(::grpc::ClientContext* context, const ::controller::GetTcpOffsetRequest* request, ::controller::GetTcpOffsetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTcpOffset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetTcpOffsetResponse>* ParamsService::Stub::PrepareAsyncGetTcpOffsetRaw(::grpc::ClientContext* context, const ::controller::GetTcpOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetTcpOffsetResponse, ::controller::GetTcpOffsetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTcpOffset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetTcpOffsetResponse>* ParamsService::Stub::AsyncGetTcpOffsetRaw(::grpc::ClientContext* context, const ::controller::GetTcpOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTcpOffsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetTcpPayload(::grpc::ClientContext* context, const ::controller::GetTcpPayloadRequest& request, ::controller::GetTcpPayloadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::GetTcpPayloadRequest, ::controller::GetTcpPayloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTcpPayload_, context, request, response);
}

void ParamsService::Stub::async::GetTcpPayload(::grpc::ClientContext* context, const ::controller::GetTcpPayloadRequest* request, ::controller::GetTcpPayloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::GetTcpPayloadRequest, ::controller::GetTcpPayloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTcpPayload_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetTcpPayload(::grpc::ClientContext* context, const ::controller::GetTcpPayloadRequest* request, ::controller::GetTcpPayloadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTcpPayload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetTcpPayloadResponse>* ParamsService::Stub::PrepareAsyncGetTcpPayloadRaw(::grpc::ClientContext* context, const ::controller::GetTcpPayloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetTcpPayloadResponse, ::controller::GetTcpPayloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTcpPayload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetTcpPayloadResponse>* ParamsService::Stub::AsyncGetTcpPayloadRaw(::grpc::ClientContext* context, const ::controller::GetTcpPayloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTcpPayloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::ForwardKinematics(::grpc::ClientContext* context, const ::controller::ForwardKinematicsRequest& request, ::controller::ForwardKinematicsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::ForwardKinematicsRequest, ::controller::ForwardKinematicsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForwardKinematics_, context, request, response);
}

void ParamsService::Stub::async::ForwardKinematics(::grpc::ClientContext* context, const ::controller::ForwardKinematicsRequest* request, ::controller::ForwardKinematicsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::ForwardKinematicsRequest, ::controller::ForwardKinematicsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForwardKinematics_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::ForwardKinematics(::grpc::ClientContext* context, const ::controller::ForwardKinematicsRequest* request, ::controller::ForwardKinematicsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForwardKinematics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::ForwardKinematicsResponse>* ParamsService::Stub::PrepareAsyncForwardKinematicsRaw(::grpc::ClientContext* context, const ::controller::ForwardKinematicsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::ForwardKinematicsResponse, ::controller::ForwardKinematicsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForwardKinematics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::ForwardKinematicsResponse>* ParamsService::Stub::AsyncForwardKinematicsRaw(::grpc::ClientContext* context, const ::controller::ForwardKinematicsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForwardKinematicsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::InverseKinematics(::grpc::ClientContext* context, const ::controller::InverseKinematicsRequest& request, ::controller::InverseKinematicsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::InverseKinematicsRequest, ::controller::InverseKinematicsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InverseKinematics_, context, request, response);
}

void ParamsService::Stub::async::InverseKinematics(::grpc::ClientContext* context, const ::controller::InverseKinematicsRequest* request, ::controller::InverseKinematicsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::InverseKinematicsRequest, ::controller::InverseKinematicsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::InverseKinematics(::grpc::ClientContext* context, const ::controller::InverseKinematicsRequest* request, ::controller::InverseKinematicsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::InverseKinematicsResponse>* ParamsService::Stub::PrepareAsyncInverseKinematicsRaw(::grpc::ClientContext* context, const ::controller::InverseKinematicsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::InverseKinematicsResponse, ::controller::InverseKinematicsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InverseKinematics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::InverseKinematicsResponse>* ParamsService::Stub::AsyncInverseKinematicsRaw(::grpc::ClientContext* context, const ::controller::InverseKinematicsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInverseKinematicsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetJointMechanicalLimit(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetJointParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointMechanicalLimit_, context, request, response);
}

void ParamsService::Stub::async::GetJointMechanicalLimit(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMechanicalLimit_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetJointMechanicalLimit(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMechanicalLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::PrepareAsyncGetJointMechanicalLimitRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetJointParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointMechanicalLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::AsyncGetJointMechanicalLimitRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointMechanicalLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetJointMechanicalMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetJointParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointMechanicalMaxVel_, context, request, response);
}

void ParamsService::Stub::async::GetJointMechanicalMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMechanicalMaxVel_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetJointMechanicalMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMechanicalMaxVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::PrepareAsyncGetJointMechanicalMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetJointParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointMechanicalMaxVel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::AsyncGetJointMechanicalMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointMechanicalMaxVelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetJointMechanicalMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetJointParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointMechanicalMaxAcc_, context, request, response);
}

void ParamsService::Stub::async::GetJointMechanicalMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMechanicalMaxAcc_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetJointMechanicalMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointMechanicalMaxAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::PrepareAsyncGetJointMechanicalMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetJointParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointMechanicalMaxAcc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetJointParamsResponse>* ParamsService::Stub::AsyncGetJointMechanicalMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointMechanicalMaxAccRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetCartesianMechanicalTranslationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetCartesianParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCartesianMechanicalTranslationMaxVel_, context, request, response);
}

void ParamsService::Stub::async::GetCartesianMechanicalTranslationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianMechanicalTranslationMaxVel_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetCartesianMechanicalTranslationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianMechanicalTranslationMaxVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::PrepareAsyncGetCartesianMechanicalTranslationMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetCartesianParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCartesianMechanicalTranslationMaxVel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::AsyncGetCartesianMechanicalTranslationMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCartesianMechanicalTranslationMaxVelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetCartesianMechanicalTranslationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetCartesianParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCartesianMechanicalTranslationMaxAcc_, context, request, response);
}

void ParamsService::Stub::async::GetCartesianMechanicalTranslationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianMechanicalTranslationMaxAcc_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetCartesianMechanicalTranslationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianMechanicalTranslationMaxAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::PrepareAsyncGetCartesianMechanicalTranslationMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetCartesianParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCartesianMechanicalTranslationMaxAcc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::AsyncGetCartesianMechanicalTranslationMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCartesianMechanicalTranslationMaxAccRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetCartesianMechanicalRotationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetCartesianParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCartesianMechanicalRotationMaxVel_, context, request, response);
}

void ParamsService::Stub::async::GetCartesianMechanicalRotationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianMechanicalRotationMaxVel_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetCartesianMechanicalRotationMaxVel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianMechanicalRotationMaxVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::PrepareAsyncGetCartesianMechanicalRotationMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetCartesianParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCartesianMechanicalRotationMaxVel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::AsyncGetCartesianMechanicalRotationMaxVelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCartesianMechanicalRotationMaxVelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ParamsService::Stub::GetCartesianMechanicalRotationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetCartesianParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCartesianMechanicalRotationMaxAcc_, context, request, response);
}

void ParamsService::Stub::async::GetCartesianMechanicalRotationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianMechanicalRotationMaxAcc_, context, request, response, std::move(f));
}

void ParamsService::Stub::async::GetCartesianMechanicalRotationMaxAcc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesianMechanicalRotationMaxAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::PrepareAsyncGetCartesianMechanicalRotationMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetCartesianParamsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCartesianMechanicalRotationMaxAcc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetCartesianParamsResponse>* ParamsService::Stub::AsyncGetCartesianMechanicalRotationMaxAccRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCartesianMechanicalRotationMaxAccRaw(context, request, cq);
  result->StartCall();
  return result;
}

ParamsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::SetJointParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetJointParamsRequest* req,
             ::controller::SetParamResponse* resp) {
               return service->SetJointSoftLimit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::SetJointParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetJointParamsRequest* req,
             ::controller::SetParamResponse* resp) {
               return service->SetJointMaxVel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::SetJointParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetJointParamsRequest* req,
             ::controller::SetParamResponse* resp) {
               return service->SetJointMaxAcc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetCartesianParamsRequest* req,
             ::controller::SetParamResponse* resp) {
               return service->SetCartesianTranslationMaxVel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetCartesianParamsRequest* req,
             ::controller::SetParamResponse* resp) {
               return service->SetCartesianTranslationMaxAcc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetCartesianParamsRequest* req,
             ::controller::SetParamResponse* resp) {
               return service->SetCartesianRotationMaxVel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::SetCartesianParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetCartesianParamsRequest* req,
             ::controller::SetParamResponse* resp) {
               return service->SetCartesianRotationMaxAcc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::SetTcpOffsetParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetTcpOffsetParamsRequest* req,
             ::controller::SetParamResponse* resp) {
               return service->SetTcpOffset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::SetTcpPayloadParamsRequest, ::controller::SetParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetTcpPayloadParamsRequest* req,
             ::controller::SetParamResponse* resp) {
               return service->SetTcpPayload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetJointParamsResponse* resp) {
               return service->GetJointSoftLimit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetJointParamsResponse* resp) {
               return service->GetJointMaxVel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetJointParamsResponse* resp) {
               return service->GetJointMaxAcc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetCartesianParamsResponse* resp) {
               return service->GetCartesianTranslationMaxVel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetCartesianParamsResponse* resp) {
               return service->GetCartesianTranslationMaxAcc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetCartesianParamsResponse* resp) {
               return service->GetCartesianRotationMaxVel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetCartesianParamsResponse* resp) {
               return service->GetCartesianRotationMaxAcc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::GetTcpOffsetRequest, ::controller::GetTcpOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::GetTcpOffsetRequest* req,
             ::controller::GetTcpOffsetResponse* resp) {
               return service->GetTcpOffset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::GetTcpPayloadRequest, ::controller::GetTcpPayloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::GetTcpPayloadRequest* req,
             ::controller::GetTcpPayloadResponse* resp) {
               return service->GetTcpPayload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::ForwardKinematicsRequest, ::controller::ForwardKinematicsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::ForwardKinematicsRequest* req,
             ::controller::ForwardKinematicsResponse* resp) {
               return service->ForwardKinematics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::controller::InverseKinematicsRequest, ::controller::InverseKinematicsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::InverseKinematicsRequest* req,
             ::controller::InverseKinematicsResponse* resp) {
               return service->InverseKinematics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetJointParamsResponse* resp) {
               return service->GetJointMechanicalLimit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetJointParamsResponse* resp) {
               return service->GetJointMechanicalMaxVel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetJointParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetJointParamsResponse* resp) {
               return service->GetJointMechanicalMaxAcc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetCartesianParamsResponse* resp) {
               return service->GetCartesianMechanicalTranslationMaxVel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetCartesianParamsResponse* resp) {
               return service->GetCartesianMechanicalTranslationMaxAcc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetCartesianParamsResponse* resp) {
               return service->GetCartesianMechanicalRotationMaxVel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ParamsService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ParamsService::Service, ::google::protobuf::Empty, ::controller::GetCartesianParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ParamsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetCartesianParamsResponse* resp) {
               return service->GetCartesianMechanicalRotationMaxAcc(ctx, req, resp);
             }, this)));
}

ParamsService::Service::~Service() {
}

::grpc::Status ParamsService::Service::SetJointSoftLimit(::grpc::ServerContext* context, const ::controller::SetJointParamsRequest* request, ::controller::SetParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::SetJointMaxVel(::grpc::ServerContext* context, const ::controller::SetJointParamsRequest* request, ::controller::SetParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::SetJointMaxAcc(::grpc::ServerContext* context, const ::controller::SetJointParamsRequest* request, ::controller::SetParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::SetCartesianTranslationMaxVel(::grpc::ServerContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::SetCartesianTranslationMaxAcc(::grpc::ServerContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::SetCartesianRotationMaxVel(::grpc::ServerContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::SetCartesianRotationMaxAcc(::grpc::ServerContext* context, const ::controller::SetCartesianParamsRequest* request, ::controller::SetParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::SetTcpOffset(::grpc::ServerContext* context, const ::controller::SetTcpOffsetParamsRequest* request, ::controller::SetParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::SetTcpPayload(::grpc::ServerContext* context, const ::controller::SetTcpPayloadParamsRequest* request, ::controller::SetParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetJointSoftLimit(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetJointMaxVel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetJointMaxAcc(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetCartesianTranslationMaxVel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetCartesianTranslationMaxAcc(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetCartesianRotationMaxVel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetCartesianRotationMaxAcc(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetTcpOffset(::grpc::ServerContext* context, const ::controller::GetTcpOffsetRequest* request, ::controller::GetTcpOffsetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetTcpPayload(::grpc::ServerContext* context, const ::controller::GetTcpPayloadRequest* request, ::controller::GetTcpPayloadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::ForwardKinematics(::grpc::ServerContext* context, const ::controller::ForwardKinematicsRequest* request, ::controller::ForwardKinematicsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::InverseKinematics(::grpc::ServerContext* context, const ::controller::InverseKinematicsRequest* request, ::controller::InverseKinematicsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetJointMechanicalLimit(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetJointMechanicalMaxVel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetJointMechanicalMaxAcc(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetJointParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetCartesianMechanicalTranslationMaxVel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetCartesianMechanicalTranslationMaxAcc(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetCartesianMechanicalRotationMaxVel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ParamsService::Service::GetCartesianMechanicalRotationMaxAcc(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetCartesianParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace controller

