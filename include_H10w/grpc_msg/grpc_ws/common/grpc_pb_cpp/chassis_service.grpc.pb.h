// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chassis_service.proto
#ifndef GRPC_chassis_5fservice_2eproto__INCLUDED
#define GRPC_chassis_5fservice_2eproto__INCLUDED

#include "chassis_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace controller {

class ClassisService final {
 public:
  static constexpr char const* service_full_name() {
    return "controller.ClassisService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::controller::SetMaxVelocityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::SetMaxVelocityResponse>> AsyncRequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::SetMaxVelocityResponse>>(AsyncRequestSetMaxVelocityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::SetMaxVelocityResponse>> PrepareAsyncRequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::SetMaxVelocityResponse>>(PrepareAsyncRequestSetMaxVelocityRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetMaxVelocityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::GetMaxVelocityResponse>> AsyncRequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::GetMaxVelocityResponse>>(AsyncRequestGetMaxVelocityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::GetMaxVelocityResponse>> PrepareAsyncRequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::GetMaxVelocityResponse>>(PrepareAsyncRequestGetMaxVelocityRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest* request, ::controller::SetMaxVelocityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest* request, ::controller::SetMaxVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetMaxVelocityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetMaxVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::SetMaxVelocityResponse>* AsyncRequestSetMaxVelocityRaw(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::SetMaxVelocityResponse>* PrepareAsyncRequestSetMaxVelocityRaw(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::GetMaxVelocityResponse>* AsyncRequestGetMaxVelocityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::GetMaxVelocityResponse>* PrepareAsyncRequestGetMaxVelocityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::controller::SetMaxVelocityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::SetMaxVelocityResponse>> AsyncRequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::SetMaxVelocityResponse>>(AsyncRequestSetMaxVelocityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::SetMaxVelocityResponse>> PrepareAsyncRequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::SetMaxVelocityResponse>>(PrepareAsyncRequestSetMaxVelocityRaw(context, request, cq));
    }
    ::grpc::Status RequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetMaxVelocityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::GetMaxVelocityResponse>> AsyncRequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::GetMaxVelocityResponse>>(AsyncRequestGetMaxVelocityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::GetMaxVelocityResponse>> PrepareAsyncRequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::GetMaxVelocityResponse>>(PrepareAsyncRequestGetMaxVelocityRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest* request, ::controller::SetMaxVelocityResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest* request, ::controller::SetMaxVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetMaxVelocityResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetMaxVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::controller::SetMaxVelocityResponse>* AsyncRequestSetMaxVelocityRaw(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::SetMaxVelocityResponse>* PrepareAsyncRequestSetMaxVelocityRaw(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::GetMaxVelocityResponse>* AsyncRequestGetMaxVelocityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::GetMaxVelocityResponse>* PrepareAsyncRequestGetMaxVelocityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestSetMaxVelocity_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestGetMaxVelocity_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestSetMaxVelocity(::grpc::ServerContext* context, const ::controller::SetMaxVelocityRequest* request, ::controller::SetMaxVelocityResponse* response);
    virtual ::grpc::Status RequestGetMaxVelocity(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetMaxVelocityResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestSetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestSetMaxVelocity() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestSetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetMaxVelocity(::grpc::ServerContext* /*context*/, const ::controller::SetMaxVelocityRequest* /*request*/, ::controller::SetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSetMaxVelocity(::grpc::ServerContext* context, ::controller::SetMaxVelocityRequest* request, ::grpc::ServerAsyncResponseWriter< ::controller::SetMaxVelocityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestGetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestGetMaxVelocity() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestGetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestGetMaxVelocity(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::GetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestGetMaxVelocity(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::controller::GetMaxVelocityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestSetMaxVelocity<WithAsyncMethod_RequestGetMaxVelocity<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestSetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestSetMaxVelocity() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::controller::SetMaxVelocityRequest, ::controller::SetMaxVelocityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::controller::SetMaxVelocityRequest* request, ::controller::SetMaxVelocityResponse* response) { return this->RequestSetMaxVelocity(context, request, response); }));}
    void SetMessageAllocatorFor_RequestSetMaxVelocity(
        ::grpc::MessageAllocator< ::controller::SetMaxVelocityRequest, ::controller::SetMaxVelocityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::controller::SetMaxVelocityRequest, ::controller::SetMaxVelocityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestSetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetMaxVelocity(::grpc::ServerContext* /*context*/, const ::controller::SetMaxVelocityRequest* /*request*/, ::controller::SetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestSetMaxVelocity(
      ::grpc::CallbackServerContext* /*context*/, const ::controller::SetMaxVelocityRequest* /*request*/, ::controller::SetMaxVelocityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestGetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestGetMaxVelocity() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::controller::GetMaxVelocityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetMaxVelocityResponse* response) { return this->RequestGetMaxVelocity(context, request, response); }));}
    void SetMessageAllocatorFor_RequestGetMaxVelocity(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::controller::GetMaxVelocityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::controller::GetMaxVelocityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestGetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestGetMaxVelocity(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::GetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestGetMaxVelocity(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::GetMaxVelocityResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestSetMaxVelocity<WithCallbackMethod_RequestGetMaxVelocity<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestSetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestSetMaxVelocity() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestSetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetMaxVelocity(::grpc::ServerContext* /*context*/, const ::controller::SetMaxVelocityRequest* /*request*/, ::controller::SetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestGetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestGetMaxVelocity() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestGetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestGetMaxVelocity(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::GetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestSetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestSetMaxVelocity() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestSetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetMaxVelocity(::grpc::ServerContext* /*context*/, const ::controller::SetMaxVelocityRequest* /*request*/, ::controller::SetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSetMaxVelocity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestGetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestGetMaxVelocity() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestGetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestGetMaxVelocity(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::GetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestGetMaxVelocity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestSetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestSetMaxVelocity() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestSetMaxVelocity(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestSetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetMaxVelocity(::grpc::ServerContext* /*context*/, const ::controller::SetMaxVelocityRequest* /*request*/, ::controller::SetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestSetMaxVelocity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestGetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestGetMaxVelocity() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestGetMaxVelocity(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestGetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestGetMaxVelocity(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::GetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestGetMaxVelocity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestSetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestSetMaxVelocity() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::controller::SetMaxVelocityRequest, ::controller::SetMaxVelocityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::controller::SetMaxVelocityRequest, ::controller::SetMaxVelocityResponse>* streamer) {
                       return this->StreamedRequestSetMaxVelocity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestSetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestSetMaxVelocity(::grpc::ServerContext* /*context*/, const ::controller::SetMaxVelocityRequest* /*request*/, ::controller::SetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestSetMaxVelocity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::controller::SetMaxVelocityRequest,::controller::SetMaxVelocityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestGetMaxVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestGetMaxVelocity() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::controller::GetMaxVelocityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::controller::GetMaxVelocityResponse>* streamer) {
                       return this->StreamedRequestGetMaxVelocity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestGetMaxVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestGetMaxVelocity(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::GetMaxVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestGetMaxVelocity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::controller::GetMaxVelocityResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestSetMaxVelocity<WithStreamedUnaryMethod_RequestGetMaxVelocity<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestSetMaxVelocity<WithStreamedUnaryMethod_RequestGetMaxVelocity<Service > > StreamedService;
};

}  // namespace controller


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_chassis_5fservice_2eproto__INCLUDED
