// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: motion_service.proto
#ifndef GRPC_motion_5fservice_2eproto__INCLUDED
#define GRPC_motion_5fservice_2eproto__INCLUDED

#include "motion_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace controller {

class MotionService final {
 public:
  static constexpr char const* service_full_name() {
    return "controller.MotionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::controller::JointMoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::JointMoveResponse>> AsyncRequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::JointMoveResponse>>(AsyncRequestSingleJointMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::JointMoveResponse>> PrepareAsyncRequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::JointMoveResponse>>(PrepareAsyncRequestSingleJointMoveRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::controller::MultiJointMoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::MultiJointMoveResponse>> AsyncRequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::MultiJointMoveResponse>>(AsyncRequestMultiJointsMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::MultiJointMoveResponse>> PrepareAsyncRequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::MultiJointMoveResponse>>(PrepareAsyncRequestMultiJointsMoveRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::controller::LinearMoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::LinearMoveResponse>> AsyncRequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::LinearMoveResponse>>(AsyncRequestLinearMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::LinearMoveResponse>> PrepareAsyncRequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::LinearMoveResponse>>(PrepareAsyncRequestLinearMoveRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::StopResponse>> AsyncRequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::StopResponse>>(AsyncRequestStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::StopResponse>> PrepareAsyncRequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::StopResponse>>(PrepareAsyncRequestStopRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::controller::EnableRealtimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::EnableRealtimeResponse>> AsyncRequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::EnableRealtimeResponse>>(AsyncRequestEnableRealtimeCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::EnableRealtimeResponse>> PrepareAsyncRequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::EnableRealtimeResponse>>(PrepareAsyncRequestEnableRealtimeCmdRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::controller::ControlPolicyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::ControlPolicyResponse>> AsyncRequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::ControlPolicyResponse>>(AsyncRequestSetControlPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::ControlPolicyResponse>> PrepareAsyncRequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::controller::ControlPolicyResponse>>(PrepareAsyncRequestSetControlPolicyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest* request, ::controller::JointMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest* request, ::controller::JointMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest* request, ::controller::MultiJointMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest* request, ::controller::MultiJointMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest* request, ::controller::LinearMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest* request, ::controller::LinearMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest* request, ::controller::EnableRealtimeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest* request, ::controller::EnableRealtimeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest* request, ::controller::ControlPolicyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest* request, ::controller::ControlPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::JointMoveResponse>* AsyncRequestSingleJointMoveRaw(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::JointMoveResponse>* PrepareAsyncRequestSingleJointMoveRaw(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::MultiJointMoveResponse>* AsyncRequestMultiJointsMoveRaw(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::MultiJointMoveResponse>* PrepareAsyncRequestMultiJointsMoveRaw(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::LinearMoveResponse>* AsyncRequestLinearMoveRaw(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::LinearMoveResponse>* PrepareAsyncRequestLinearMoveRaw(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::StopResponse>* AsyncRequestStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::StopResponse>* PrepareAsyncRequestStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::EnableRealtimeResponse>* AsyncRequestEnableRealtimeCmdRaw(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::EnableRealtimeResponse>* PrepareAsyncRequestEnableRealtimeCmdRaw(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::ControlPolicyResponse>* AsyncRequestSetControlPolicyRaw(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::controller::ControlPolicyResponse>* PrepareAsyncRequestSetControlPolicyRaw(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::controller::JointMoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::JointMoveResponse>> AsyncRequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::JointMoveResponse>>(AsyncRequestSingleJointMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::JointMoveResponse>> PrepareAsyncRequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::JointMoveResponse>>(PrepareAsyncRequestSingleJointMoveRaw(context, request, cq));
    }
    ::grpc::Status RequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::controller::MultiJointMoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::MultiJointMoveResponse>> AsyncRequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::MultiJointMoveResponse>>(AsyncRequestMultiJointsMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::MultiJointMoveResponse>> PrepareAsyncRequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::MultiJointMoveResponse>>(PrepareAsyncRequestMultiJointsMoveRaw(context, request, cq));
    }
    ::grpc::Status RequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::controller::LinearMoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::LinearMoveResponse>> AsyncRequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::LinearMoveResponse>>(AsyncRequestLinearMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::LinearMoveResponse>> PrepareAsyncRequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::LinearMoveResponse>>(PrepareAsyncRequestLinearMoveRaw(context, request, cq));
    }
    ::grpc::Status RequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::StopResponse>> AsyncRequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::StopResponse>>(AsyncRequestStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::StopResponse>> PrepareAsyncRequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::StopResponse>>(PrepareAsyncRequestStopRaw(context, request, cq));
    }
    ::grpc::Status RequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::controller::EnableRealtimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::EnableRealtimeResponse>> AsyncRequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::EnableRealtimeResponse>>(AsyncRequestEnableRealtimeCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::EnableRealtimeResponse>> PrepareAsyncRequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::EnableRealtimeResponse>>(PrepareAsyncRequestEnableRealtimeCmdRaw(context, request, cq));
    }
    ::grpc::Status RequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::controller::ControlPolicyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::ControlPolicyResponse>> AsyncRequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::ControlPolicyResponse>>(AsyncRequestSetControlPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::ControlPolicyResponse>> PrepareAsyncRequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::controller::ControlPolicyResponse>>(PrepareAsyncRequestSetControlPolicyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest* request, ::controller::JointMoveResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestSingleJointMove(::grpc::ClientContext* context, const ::controller::JointMoveRequest* request, ::controller::JointMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest* request, ::controller::MultiJointMoveResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestMultiJointsMove(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest* request, ::controller::MultiJointMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest* request, ::controller::LinearMoveResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestLinearMove(::grpc::ClientContext* context, const ::controller::LinearMoveRequest* request, ::controller::LinearMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestStop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest* request, ::controller::EnableRealtimeResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestEnableRealtimeCmd(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest* request, ::controller::EnableRealtimeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest* request, ::controller::ControlPolicyResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestSetControlPolicy(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest* request, ::controller::ControlPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::controller::JointMoveResponse>* AsyncRequestSingleJointMoveRaw(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::JointMoveResponse>* PrepareAsyncRequestSingleJointMoveRaw(::grpc::ClientContext* context, const ::controller::JointMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::MultiJointMoveResponse>* AsyncRequestMultiJointsMoveRaw(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::MultiJointMoveResponse>* PrepareAsyncRequestMultiJointsMoveRaw(::grpc::ClientContext* context, const ::controller::MultiJointMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::LinearMoveResponse>* AsyncRequestLinearMoveRaw(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::LinearMoveResponse>* PrepareAsyncRequestLinearMoveRaw(::grpc::ClientContext* context, const ::controller::LinearMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::StopResponse>* AsyncRequestStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::StopResponse>* PrepareAsyncRequestStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::EnableRealtimeResponse>* AsyncRequestEnableRealtimeCmdRaw(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::EnableRealtimeResponse>* PrepareAsyncRequestEnableRealtimeCmdRaw(::grpc::ClientContext* context, const ::controller::EnableRealtimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::ControlPolicyResponse>* AsyncRequestSetControlPolicyRaw(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::controller::ControlPolicyResponse>* PrepareAsyncRequestSetControlPolicyRaw(::grpc::ClientContext* context, const ::controller::ControlPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestSingleJointMove_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestMultiJointsMove_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestLinearMove_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestStop_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestEnableRealtimeCmd_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestSetControlPolicy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestSingleJointMove(::grpc::ServerContext* context, const ::controller::JointMoveRequest* request, ::controller::JointMoveResponse* response);
    virtual ::grpc::Status RequestMultiJointsMove(::grpc::ServerContext* context, const ::controller::MultiJointMoveRequest* request, ::controller::MultiJointMoveResponse* response);
    virtual ::grpc::Status RequestLinearMove(::grpc::ServerContext* context, const ::controller::LinearMoveRequest* request, ::controller::LinearMoveResponse* response);
    virtual ::grpc::Status RequestStop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::StopResponse* response);
    virtual ::grpc::Status RequestEnableRealtimeCmd(::grpc::ServerContext* context, const ::controller::EnableRealtimeRequest* request, ::controller::EnableRealtimeResponse* response);
    virtual ::grpc::Status RequestSetControlPolicy(::grpc::ServerContext* context, const ::controller::ControlPolicyRequest* request, ::controller::ControlPolicyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestSingleJointMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestSingleJointMove() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestSingleJointMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSingleJointMove(::grpc::ServerContext* /*context*/, const ::controller::JointMoveRequest* /*request*/, ::controller::JointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSingleJointMove(::grpc::ServerContext* context, ::controller::JointMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::controller::JointMoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestMultiJointsMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestMultiJointsMove() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestMultiJointsMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMultiJointsMove(::grpc::ServerContext* /*context*/, const ::controller::MultiJointMoveRequest* /*request*/, ::controller::MultiJointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestMultiJointsMove(::grpc::ServerContext* context, ::controller::MultiJointMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::controller::MultiJointMoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestLinearMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestLinearMove() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestLinearMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLinearMove(::grpc::ServerContext* /*context*/, const ::controller::LinearMoveRequest* /*request*/, ::controller::LinearMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestLinearMove(::grpc::ServerContext* context, ::controller::LinearMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::controller::LinearMoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestStop() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RequestStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestStop(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::controller::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestEnableRealtimeCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestEnableRealtimeCmd() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RequestEnableRealtimeCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestEnableRealtimeCmd(::grpc::ServerContext* /*context*/, const ::controller::EnableRealtimeRequest* /*request*/, ::controller::EnableRealtimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestEnableRealtimeCmd(::grpc::ServerContext* context, ::controller::EnableRealtimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::controller::EnableRealtimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestSetControlPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestSetControlPolicy() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RequestSetControlPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetControlPolicy(::grpc::ServerContext* /*context*/, const ::controller::ControlPolicyRequest* /*request*/, ::controller::ControlPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSetControlPolicy(::grpc::ServerContext* context, ::controller::ControlPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::controller::ControlPolicyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestSingleJointMove<WithAsyncMethod_RequestMultiJointsMove<WithAsyncMethod_RequestLinearMove<WithAsyncMethod_RequestStop<WithAsyncMethod_RequestEnableRealtimeCmd<WithAsyncMethod_RequestSetControlPolicy<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestSingleJointMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestSingleJointMove() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::controller::JointMoveRequest, ::controller::JointMoveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::controller::JointMoveRequest* request, ::controller::JointMoveResponse* response) { return this->RequestSingleJointMove(context, request, response); }));}
    void SetMessageAllocatorFor_RequestSingleJointMove(
        ::grpc::MessageAllocator< ::controller::JointMoveRequest, ::controller::JointMoveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::controller::JointMoveRequest, ::controller::JointMoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestSingleJointMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSingleJointMove(::grpc::ServerContext* /*context*/, const ::controller::JointMoveRequest* /*request*/, ::controller::JointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestSingleJointMove(
      ::grpc::CallbackServerContext* /*context*/, const ::controller::JointMoveRequest* /*request*/, ::controller::JointMoveResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestMultiJointsMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestMultiJointsMove() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::controller::MultiJointMoveRequest, ::controller::MultiJointMoveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::controller::MultiJointMoveRequest* request, ::controller::MultiJointMoveResponse* response) { return this->RequestMultiJointsMove(context, request, response); }));}
    void SetMessageAllocatorFor_RequestMultiJointsMove(
        ::grpc::MessageAllocator< ::controller::MultiJointMoveRequest, ::controller::MultiJointMoveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::controller::MultiJointMoveRequest, ::controller::MultiJointMoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestMultiJointsMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMultiJointsMove(::grpc::ServerContext* /*context*/, const ::controller::MultiJointMoveRequest* /*request*/, ::controller::MultiJointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestMultiJointsMove(
      ::grpc::CallbackServerContext* /*context*/, const ::controller::MultiJointMoveRequest* /*request*/, ::controller::MultiJointMoveResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestLinearMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestLinearMove() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::controller::LinearMoveRequest, ::controller::LinearMoveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::controller::LinearMoveRequest* request, ::controller::LinearMoveResponse* response) { return this->RequestLinearMove(context, request, response); }));}
    void SetMessageAllocatorFor_RequestLinearMove(
        ::grpc::MessageAllocator< ::controller::LinearMoveRequest, ::controller::LinearMoveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::controller::LinearMoveRequest, ::controller::LinearMoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestLinearMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLinearMove(::grpc::ServerContext* /*context*/, const ::controller::LinearMoveRequest* /*request*/, ::controller::LinearMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestLinearMove(
      ::grpc::CallbackServerContext* /*context*/, const ::controller::LinearMoveRequest* /*request*/, ::controller::LinearMoveResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestStop() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::controller::StopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::controller::StopResponse* response) { return this->RequestStop(context, request, response); }));}
    void SetMessageAllocatorFor_RequestStop(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::controller::StopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::controller::StopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestStop(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::StopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestEnableRealtimeCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestEnableRealtimeCmd() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::controller::EnableRealtimeRequest, ::controller::EnableRealtimeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::controller::EnableRealtimeRequest* request, ::controller::EnableRealtimeResponse* response) { return this->RequestEnableRealtimeCmd(context, request, response); }));}
    void SetMessageAllocatorFor_RequestEnableRealtimeCmd(
        ::grpc::MessageAllocator< ::controller::EnableRealtimeRequest, ::controller::EnableRealtimeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::controller::EnableRealtimeRequest, ::controller::EnableRealtimeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestEnableRealtimeCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestEnableRealtimeCmd(::grpc::ServerContext* /*context*/, const ::controller::EnableRealtimeRequest* /*request*/, ::controller::EnableRealtimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestEnableRealtimeCmd(
      ::grpc::CallbackServerContext* /*context*/, const ::controller::EnableRealtimeRequest* /*request*/, ::controller::EnableRealtimeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestSetControlPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestSetControlPolicy() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::controller::ControlPolicyRequest, ::controller::ControlPolicyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::controller::ControlPolicyRequest* request, ::controller::ControlPolicyResponse* response) { return this->RequestSetControlPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RequestSetControlPolicy(
        ::grpc::MessageAllocator< ::controller::ControlPolicyRequest, ::controller::ControlPolicyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::controller::ControlPolicyRequest, ::controller::ControlPolicyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestSetControlPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetControlPolicy(::grpc::ServerContext* /*context*/, const ::controller::ControlPolicyRequest* /*request*/, ::controller::ControlPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestSetControlPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::controller::ControlPolicyRequest* /*request*/, ::controller::ControlPolicyResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestSingleJointMove<WithCallbackMethod_RequestMultiJointsMove<WithCallbackMethod_RequestLinearMove<WithCallbackMethod_RequestStop<WithCallbackMethod_RequestEnableRealtimeCmd<WithCallbackMethod_RequestSetControlPolicy<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestSingleJointMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestSingleJointMove() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestSingleJointMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSingleJointMove(::grpc::ServerContext* /*context*/, const ::controller::JointMoveRequest* /*request*/, ::controller::JointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestMultiJointsMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestMultiJointsMove() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestMultiJointsMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMultiJointsMove(::grpc::ServerContext* /*context*/, const ::controller::MultiJointMoveRequest* /*request*/, ::controller::MultiJointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestLinearMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestLinearMove() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestLinearMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLinearMove(::grpc::ServerContext* /*context*/, const ::controller::LinearMoveRequest* /*request*/, ::controller::LinearMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestStop() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RequestStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestEnableRealtimeCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestEnableRealtimeCmd() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RequestEnableRealtimeCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestEnableRealtimeCmd(::grpc::ServerContext* /*context*/, const ::controller::EnableRealtimeRequest* /*request*/, ::controller::EnableRealtimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestSetControlPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestSetControlPolicy() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RequestSetControlPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetControlPolicy(::grpc::ServerContext* /*context*/, const ::controller::ControlPolicyRequest* /*request*/, ::controller::ControlPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestSingleJointMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestSingleJointMove() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestSingleJointMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSingleJointMove(::grpc::ServerContext* /*context*/, const ::controller::JointMoveRequest* /*request*/, ::controller::JointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSingleJointMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestMultiJointsMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestMultiJointsMove() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestMultiJointsMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMultiJointsMove(::grpc::ServerContext* /*context*/, const ::controller::MultiJointMoveRequest* /*request*/, ::controller::MultiJointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestMultiJointsMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestLinearMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestLinearMove() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestLinearMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLinearMove(::grpc::ServerContext* /*context*/, const ::controller::LinearMoveRequest* /*request*/, ::controller::LinearMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestLinearMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestStop() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RequestStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestEnableRealtimeCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestEnableRealtimeCmd() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RequestEnableRealtimeCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestEnableRealtimeCmd(::grpc::ServerContext* /*context*/, const ::controller::EnableRealtimeRequest* /*request*/, ::controller::EnableRealtimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestEnableRealtimeCmd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestSetControlPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestSetControlPolicy() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RequestSetControlPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetControlPolicy(::grpc::ServerContext* /*context*/, const ::controller::ControlPolicyRequest* /*request*/, ::controller::ControlPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSetControlPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestSingleJointMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestSingleJointMove() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestSingleJointMove(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestSingleJointMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSingleJointMove(::grpc::ServerContext* /*context*/, const ::controller::JointMoveRequest* /*request*/, ::controller::JointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestSingleJointMove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestMultiJointsMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestMultiJointsMove() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestMultiJointsMove(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestMultiJointsMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMultiJointsMove(::grpc::ServerContext* /*context*/, const ::controller::MultiJointMoveRequest* /*request*/, ::controller::MultiJointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestMultiJointsMove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestLinearMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestLinearMove() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestLinearMove(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestLinearMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLinearMove(::grpc::ServerContext* /*context*/, const ::controller::LinearMoveRequest* /*request*/, ::controller::LinearMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestLinearMove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestStop() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestEnableRealtimeCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestEnableRealtimeCmd() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestEnableRealtimeCmd(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestEnableRealtimeCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestEnableRealtimeCmd(::grpc::ServerContext* /*context*/, const ::controller::EnableRealtimeRequest* /*request*/, ::controller::EnableRealtimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestEnableRealtimeCmd(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestSetControlPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestSetControlPolicy() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestSetControlPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestSetControlPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSetControlPolicy(::grpc::ServerContext* /*context*/, const ::controller::ControlPolicyRequest* /*request*/, ::controller::ControlPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestSetControlPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestSingleJointMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestSingleJointMove() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::controller::JointMoveRequest, ::controller::JointMoveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::controller::JointMoveRequest, ::controller::JointMoveResponse>* streamer) {
                       return this->StreamedRequestSingleJointMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestSingleJointMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestSingleJointMove(::grpc::ServerContext* /*context*/, const ::controller::JointMoveRequest* /*request*/, ::controller::JointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestSingleJointMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::controller::JointMoveRequest,::controller::JointMoveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestMultiJointsMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestMultiJointsMove() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::controller::MultiJointMoveRequest, ::controller::MultiJointMoveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::controller::MultiJointMoveRequest, ::controller::MultiJointMoveResponse>* streamer) {
                       return this->StreamedRequestMultiJointsMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestMultiJointsMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestMultiJointsMove(::grpc::ServerContext* /*context*/, const ::controller::MultiJointMoveRequest* /*request*/, ::controller::MultiJointMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestMultiJointsMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::controller::MultiJointMoveRequest,::controller::MultiJointMoveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestLinearMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestLinearMove() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::controller::LinearMoveRequest, ::controller::LinearMoveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::controller::LinearMoveRequest, ::controller::LinearMoveResponse>* streamer) {
                       return this->StreamedRequestLinearMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestLinearMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestLinearMove(::grpc::ServerContext* /*context*/, const ::controller::LinearMoveRequest* /*request*/, ::controller::LinearMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestLinearMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::controller::LinearMoveRequest,::controller::LinearMoveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestStop() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::controller::StopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::controller::StopResponse>* streamer) {
                       return this->StreamedRequestStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestStop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::controller::StopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestEnableRealtimeCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestEnableRealtimeCmd() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::controller::EnableRealtimeRequest, ::controller::EnableRealtimeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::controller::EnableRealtimeRequest, ::controller::EnableRealtimeResponse>* streamer) {
                       return this->StreamedRequestEnableRealtimeCmd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestEnableRealtimeCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestEnableRealtimeCmd(::grpc::ServerContext* /*context*/, const ::controller::EnableRealtimeRequest* /*request*/, ::controller::EnableRealtimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestEnableRealtimeCmd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::controller::EnableRealtimeRequest,::controller::EnableRealtimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestSetControlPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestSetControlPolicy() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::controller::ControlPolicyRequest, ::controller::ControlPolicyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::controller::ControlPolicyRequest, ::controller::ControlPolicyResponse>* streamer) {
                       return this->StreamedRequestSetControlPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestSetControlPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestSetControlPolicy(::grpc::ServerContext* /*context*/, const ::controller::ControlPolicyRequest* /*request*/, ::controller::ControlPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestSetControlPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::controller::ControlPolicyRequest,::controller::ControlPolicyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestSingleJointMove<WithStreamedUnaryMethod_RequestMultiJointsMove<WithStreamedUnaryMethod_RequestLinearMove<WithStreamedUnaryMethod_RequestStop<WithStreamedUnaryMethod_RequestEnableRealtimeCmd<WithStreamedUnaryMethod_RequestSetControlPolicy<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestSingleJointMove<WithStreamedUnaryMethod_RequestMultiJointsMove<WithStreamedUnaryMethod_RequestLinearMove<WithStreamedUnaryMethod_RequestStop<WithStreamedUnaryMethod_RequestEnableRealtimeCmd<WithStreamedUnaryMethod_RequestSetControlPolicy<Service > > > > > > StreamedService;
};

}  // namespace controller


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_motion_5fservice_2eproto__INCLUDED
