// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chassis_service.proto

#include "chassis_service.pb.h"
#include "chassis_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace controller {

static const char* ClassisService_method_names[] = {
  "/controller.ClassisService/RequestSetMaxVelocity",
  "/controller.ClassisService/RequestGetMaxVelocity",
};

std::unique_ptr< ClassisService::Stub> ClassisService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClassisService::Stub> stub(new ClassisService::Stub(channel, options));
  return stub;
}

ClassisService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestSetMaxVelocity_(ClassisService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestGetMaxVelocity_(ClassisService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClassisService::Stub::RequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::controller::SetMaxVelocityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::controller::SetMaxVelocityRequest, ::controller::SetMaxVelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestSetMaxVelocity_, context, request, response);
}

void ClassisService::Stub::async::RequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest* request, ::controller::SetMaxVelocityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::controller::SetMaxVelocityRequest, ::controller::SetMaxVelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestSetMaxVelocity_, context, request, response, std::move(f));
}

void ClassisService::Stub::async::RequestSetMaxVelocity(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest* request, ::controller::SetMaxVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestSetMaxVelocity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::SetMaxVelocityResponse>* ClassisService::Stub::PrepareAsyncRequestSetMaxVelocityRaw(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::SetMaxVelocityResponse, ::controller::SetMaxVelocityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestSetMaxVelocity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::SetMaxVelocityResponse>* ClassisService::Stub::AsyncRequestSetMaxVelocityRaw(::grpc::ClientContext* context, const ::controller::SetMaxVelocityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestSetMaxVelocityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClassisService::Stub::RequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::controller::GetMaxVelocityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::controller::GetMaxVelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestGetMaxVelocity_, context, request, response);
}

void ClassisService::Stub::async::RequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetMaxVelocityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::controller::GetMaxVelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestGetMaxVelocity_, context, request, response, std::move(f));
}

void ClassisService::Stub::async::RequestGetMaxVelocity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::controller::GetMaxVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestGetMaxVelocity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::controller::GetMaxVelocityResponse>* ClassisService::Stub::PrepareAsyncRequestGetMaxVelocityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::controller::GetMaxVelocityResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestGetMaxVelocity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::controller::GetMaxVelocityResponse>* ClassisService::Stub::AsyncRequestGetMaxVelocityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestGetMaxVelocityRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClassisService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClassisService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClassisService::Service, ::controller::SetMaxVelocityRequest, ::controller::SetMaxVelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClassisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::controller::SetMaxVelocityRequest* req,
             ::controller::SetMaxVelocityResponse* resp) {
               return service->RequestSetMaxVelocity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClassisService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClassisService::Service, ::google::protobuf::Empty, ::controller::GetMaxVelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClassisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::controller::GetMaxVelocityResponse* resp) {
               return service->RequestGetMaxVelocity(ctx, req, resp);
             }, this)));
}

ClassisService::Service::~Service() {
}

::grpc::Status ClassisService::Service::RequestSetMaxVelocity(::grpc::ServerContext* context, const ::controller::SetMaxVelocityRequest* request, ::controller::SetMaxVelocityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClassisService::Service::RequestGetMaxVelocity(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::controller::GetMaxVelocityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace controller

